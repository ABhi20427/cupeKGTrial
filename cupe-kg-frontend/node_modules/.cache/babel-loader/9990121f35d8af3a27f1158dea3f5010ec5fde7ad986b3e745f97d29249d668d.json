{"ast":null,"code":"// cupe-kg-frontend/src/utils/enhancedRoutePlanner.js\n// FIXED VERSION - Replace your entire enhancedRoutePlanner.js with this\n\nexport class UltraAccurateRoutePlanner {\n  constructor(locations, routes) {\n    this.locations = locations || [];\n    this.routes = routes || [];\n\n    // Real distance matrix (in km) between major Indian cities\n    this.realDistanceMatrix = {\n      'delhi': {\n        'jaipur': 280,\n        'agra': 233,\n        'varanasi': 821,\n        'amritsar': 460,\n        'hampi': 1483,\n        'udaipur': 421,\n        'khajuraho': 620,\n        'bodh-gaya': 1105\n      },\n      'jaipur': {\n        'delhi': 280,\n        'udaipur': 393,\n        'taj-mahal': 240,\n        'ajanta': 739\n      },\n      'taj-mahal': {\n        'delhi': 233,\n        'jaipur': 240,\n        'khajuraho': 295,\n        'varanasi': 605\n      },\n      'varanasi': {\n        'delhi': 821,\n        'bodh-gaya': 250,\n        'khajuraho': 298,\n        'kolkata': 679,\n        'agra': 605\n      },\n      'bodh-gaya': {\n        'varanasi': 250,\n        'delhi': 1105,\n        'kolkata': 495,\n        'patna': 135\n      },\n      'hampi': {\n        'delhi': 1483,\n        'madurai': 440\n      },\n      'madurai': {\n        'hampi': 440,\n        'chennai': 462,\n        'bangalore': 460,\n        'kochi': 257\n      },\n      'amritsar': {\n        'delhi': 460,\n        'chandigarh': 230,\n        'shimla': 350\n      },\n      'udaipur': {\n        'jaipur': 393,\n        'delhi': 421,\n        'mumbai': 734,\n        'ajanta': 451\n      },\n      'konark': {\n        'bhubaneswar': 65,\n        'kolkata': 380,\n        'delhi': 1108\n      },\n      'ajanta': {\n        'ellora': 95,\n        'mumbai': 440,\n        'pune': 240,\n        'udaipur': 451\n      },\n      'ellora': {\n        'ajanta': 95,\n        'mumbai': 380,\n        'pune': 220\n      }\n    };\n\n    // Transportation costs (INR per km)\n    this.transportationCosts = {\n      'flight': 3.5,\n      'train': 0.75,\n      'bus': 0.45,\n      'car': 12\n    };\n\n    // Accommodation costs by city (per night)\n    this.accommodationCosts = {\n      'delhi': {\n        low: 1200,\n        medium: 3500,\n        high: 8500\n      },\n      'jaipur': {\n        low: 800,\n        medium: 2500,\n        high: 6500\n      },\n      'taj-mahal': {\n        low: 900,\n        medium: 2800,\n        high: 7000\n      },\n      'varanasi': {\n        low: 600,\n        medium: 1800,\n        high: 4500\n      },\n      'amritsar': {\n        low: 700,\n        medium: 2000,\n        high: 5000\n      },\n      'udaipur': {\n        low: 1000,\n        medium: 3200,\n        high: 8000\n      },\n      'hampi': {\n        low: 500,\n        medium: 1500,\n        high: 3500\n      },\n      'madurai': {\n        low: 600,\n        medium: 1800,\n        high: 4000\n      },\n      'bodh-gaya': {\n        low: 400,\n        medium: 1200,\n        high: 2800\n      },\n      'konark': {\n        low: 600,\n        medium: 1600,\n        high: 3500\n      },\n      'mahabalipuram': {\n        low: 800,\n        medium: 2200,\n        high: 5500\n      },\n      'ajanta': {\n        low: 600,\n        medium: 1600,\n        high: 3800\n      },\n      'ellora': {\n        low: 600,\n        medium: 1600,\n        high: 3800\n      },\n      'khajuraho': {\n        low: 700,\n        medium: 2000,\n        high: 4500\n      }\n    };\n\n    // Weather and seasonal data\n    this.seasonalData = {\n      'winter': {\n        months: ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar'],\n        bestRegions: ['north', 'central', 'west', 'south'],\n        temperature: {\n          min: 10,\n          max: 25\n        },\n        rainfall: 'minimal'\n      },\n      'summer': {\n        months: ['Apr', 'May', 'Jun'],\n        bestRegions: ['hills', 'north-east'],\n        avoidRegions: ['rajasthan', 'central'],\n        temperature: {\n          min: 25,\n          max: 45\n        },\n        rainfall: 'none'\n      },\n      'monsoon': {\n        months: ['Jul', 'Aug', 'Sep'],\n        bestRegions: ['western-ghats', 'caves'],\n        temperature: {\n          min: 20,\n          max: 30\n        },\n        rainfall: 'heavy'\n      }\n    };\n  }\n\n  // Main route creation function\n  createUltraAccurateRoute(preferences) {\n    console.log('Creating ultra-accurate route with preferences:', preferences);\n    const {\n      interests = [],\n      max_travel_days = 7,\n      budget_range = 'medium',\n      preferred_season = 'winter',\n      start_location = null,\n      transport_mode = 'car'\n    } = preferences;\n\n    // Step 1: Filter locations by interests\n    const candidateLocations = this.filterLocationsByInterests(interests);\n    console.log('Candidate locations found:', candidateLocations.length);\n    if (candidateLocations.length === 0) {\n      throw new Error('No locations found matching your interests');\n    }\n\n    // Step 2: Create optimized path\n    const optimizedPath = this.optimizePath(candidateLocations, start_location, max_travel_days);\n    console.log('Optimized path created:', optimizedPath.length, 'locations');\n    if (optimizedPath.length === 0) {\n      throw new Error('Could not create an optimized path with your preferences');\n    }\n\n    // Step 3: Generate detailed itinerary\n    const detailedItinerary = this.createDetailedItinerary(optimizedPath, transport_mode, budget_range);\n    return detailedItinerary;\n  }\n\n  // Filter locations based on interests\n  filterLocationsByInterests(interests) {\n    if (!interests || interests.length === 0) {\n      return this.locations.slice(0, 8); // Return first 8 locations as default\n    }\n    const filteredLocations = this.locations.filter(location => {\n      const locationTags = location.tags || [];\n      const locationCategory = location.category || '';\n      const locationDescription = location.description || '';\n      return interests.some(interest => {\n        return locationTags.some(tag => tag.toLowerCase().includes(interest.toLowerCase())) || locationCategory.toLowerCase().includes(interest.toLowerCase()) || locationDescription.toLowerCase().includes(interest.toLowerCase());\n      });\n    });\n\n    // If filtered results are too few, add some popular destinations\n    if (filteredLocations.length < 3) {\n      const popularDestinations = this.locations.filter(loc => ['taj-mahal', 'delhi', 'jaipur', 'varanasi', 'hampi'].includes(loc.id));\n      return [...filteredLocations, ...popularDestinations].slice(0, 8);\n    }\n    return filteredLocations.slice(0, 10);\n  }\n\n  // Optimize path based on distance and travel time\n  optimizePath(locations, startLocation, maxDays) {\n    if (!locations || locations.length === 0) {\n      return [];\n    }\n\n    // Limit locations based on travel days (roughly 1-2 locations per day)\n    const maxLocations = Math.min(locations.length, Math.ceil(maxDays / 1.5));\n    const limitedLocations = locations.slice(0, maxLocations);\n    if (limitedLocations.length <= 1) {\n      return limitedLocations;\n    }\n\n    // Simple nearest neighbor optimization\n    const optimizedPath = [];\n    const remainingLocations = [...limitedLocations];\n\n    // Start with location closest to start point or first location\n    let currentLocation;\n    if (startLocation) {\n      currentLocation = this.findNearestLocation(remainingLocations, startLocation);\n    } else {\n      currentLocation = remainingLocations[0];\n    }\n    optimizedPath.push(currentLocation);\n    const currentIndex = remainingLocations.indexOf(currentLocation);\n    remainingLocations.splice(currentIndex, 1);\n\n    // Add nearest neighbors\n    while (remainingLocations.length > 0 && optimizedPath.length < maxLocations) {\n      const currentCoords = this.getLocationCoordinates(currentLocation);\n      let nearestLocation = null;\n      let shortestDistance = Infinity;\n      remainingLocations.forEach(loc => {\n        const locCoords = this.getLocationCoordinates(loc);\n        const distance = this.calculateHaversineDistance(currentCoords, locCoords);\n        if (distance < shortestDistance) {\n          shortestDistance = distance;\n          nearestLocation = loc;\n        }\n      });\n      if (nearestLocation) {\n        optimizedPath.push(nearestLocation);\n        currentLocation = nearestLocation;\n        const nearestIndex = remainingLocations.indexOf(nearestLocation);\n        remainingLocations.splice(nearestIndex, 1);\n      } else {\n        break;\n      }\n    }\n    return optimizedPath;\n  }\n\n  // Find nearest location to a given point\n  findNearestLocation(locations, point) {\n    let nearest = locations[0];\n    let shortestDistance = Infinity;\n    locations.forEach(location => {\n      const locCoords = this.getLocationCoordinates(location);\n      const distance = this.calculateHaversineDistance(point, locCoords);\n      if (distance < shortestDistance) {\n        shortestDistance = distance;\n        nearest = location;\n      }\n    });\n    return nearest;\n  }\n\n  // Get coordinates from location object\n  getLocationCoordinates(location) {\n    if (location.coordinates) {\n      if (typeof location.coordinates === 'object' && location.coordinates.lat) {\n        return {\n          lat: location.coordinates.lat,\n          lng: location.coordinates.lng\n        };\n      } else if (Array.isArray(location.coordinates)) {\n        return {\n          lat: location.coordinates[0],\n          lng: location.coordinates[1]\n        };\n      }\n    }\n\n    // Fallback coordinates if not available\n    return {\n      lat: 28.6139,\n      lng: 77.2090\n    }; // Delhi coordinates as fallback\n  }\n\n  // Calculate Haversine distance\n  calculateHaversineDistance(coord1, coord2) {\n    const R = 6371; // Earth's radius in km\n    const lat1 = coord1.lat || coord1[0] || 0;\n    const lng1 = coord1.lng || coord1[1] || 0;\n    const lat2 = coord2.lat || coord2[0] || 0;\n    const lng2 = coord2.lng || coord2[1] || 0;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return Math.round(R * c);\n  }\n\n  // Create detailed itinerary\n  createDetailedItinerary(path, transportMode, budget) {\n    const itinerary = [];\n    let currentDay = 1;\n    let totalCost = 0;\n    for (let i = 0; i < path.length; i++) {\n      const location = path[i];\n      const nextLocation = path[i + 1];\n\n      // Location exploration days - THIS IS THE MISSING METHOD\n      const daysAtLocation = this.getOptimalDaysAtLocation(location);\n      const dailyCost = this.getAccommodationCost(location.id || location.name, budget) + this.getFoodCost(budget) + this.getLocalTransportCost();\n      for (let day = 0; day < daysAtLocation; day++) {\n        const dayActivity = this.generateDayActivity(location, day, budget);\n        itinerary.push({\n          day: currentDay + day,\n          location: location.name,\n          type: 'exploration',\n          description: dayActivity.description,\n          highlights: dayActivity.highlights,\n          costs: {\n            accommodation: this.getAccommodationCost(location.id || location.name, budget),\n            food: this.getFoodCost(budget),\n            localTransport: this.getLocalTransportCost(),\n            attractions: dayActivity.attractionCosts,\n            total: dailyCost + dayActivity.attractionCosts\n          },\n          culturalInsights: this.getCulturalInsights(location),\n          practicalTips: this.getPracticalTips(location)\n        });\n        totalCost += dailyCost + dayActivity.attractionCosts;\n      }\n      currentDay += daysAtLocation;\n\n      // Travel day\n      if (nextLocation) {\n        const travelDetails = this.getAccurateTravelDetails(location, nextLocation, transportMode);\n        itinerary.push({\n          day: currentDay,\n          location: `${location.name} to ${nextLocation.name}`,\n          type: 'travel',\n          description: `Travel from ${location.name} to ${nextLocation.name} via ${travelDetails.mode}`,\n          travelDetails: travelDetails,\n          costs: {\n            transport: travelDetails.cost,\n            food: travelDetails.mealCost || 0,\n            total: travelDetails.cost + (travelDetails.mealCost || 0)\n          }\n        });\n        totalCost += travelDetails.cost + (travelDetails.mealCost || 0);\n        currentDay++;\n      }\n    }\n    return {\n      id: `ultra-accurate-${Date.now()}`,\n      name: 'Your Culturally Intelligent Route',\n      description: `Scientifically optimized ${path.length}-destination route with cultural depth`,\n      color: '#2196F3',\n      path: path.map(loc => {\n        const coords = this.getLocationCoordinates(loc);\n        return [coords.lat, coords.lng];\n      }),\n      locations: path.map(loc => {\n        const coords = this.getLocationCoordinates(loc);\n        return {\n          name: loc.name,\n          coordinates: [coords.lat, coords.lng],\n          description: loc.description || 'Cultural heritage site'\n        };\n      }),\n      detailedItinerary: itinerary,\n      totalCost: Math.round(totalCost),\n      totalDays: currentDay - 1,\n      culturalThemes: this.extractCulturalThemes(path),\n      optimizationMetrics: {\n        totalDistance: this.calculateTotalDistance(path),\n        culturalDiversity: this.calculateCulturalDiversity(path),\n        costEfficiency: this.calculateCostEfficiency(totalCost, path.length)\n      }\n    };\n  }\n\n  // THE MISSING METHOD - Calculate optimal days at each location\n  getOptimalDaysAtLocation(location) {\n    var _location$name;\n    // Default to 2 days, but adjust based on location importance and attractions\n    const locationName = ((_location$name = location.name) === null || _location$name === void 0 ? void 0 : _location$name.toLowerCase()) || '';\n\n    // Major destinations that need more time\n    const majorDestinations = ['delhi', 'rajasthan', 'taj mahal', 'varanasi', 'hampi'];\n    if (majorDestinations.some(dest => locationName.includes(dest))) {\n      return 3;\n    }\n\n    // UNESCO sites or complex sites\n    const complexSites = ['ajanta', 'ellora', 'khajuraho', 'konark'];\n    if (complexSites.some(site => locationName.includes(site))) {\n      return 2;\n    }\n\n    // Default for most locations\n    return 2;\n  }\n\n  // Helper methods for accurate cost calculation\n  getAccommodationCost(locationId, budget) {\n    const normalizedId = (locationId === null || locationId === void 0 ? void 0 : locationId.toLowerCase().replace(/\\s+/g, '-')) || 'default';\n    const costs = this.accommodationCosts[normalizedId] || {\n      low: 800,\n      medium: 2500,\n      high: 6000\n    };\n    return costs[budget] || costs.medium;\n  }\n  getFoodCost(budget) {\n    const foodCosts = {\n      low: 800,\n      medium: 1500,\n      high: 3000\n    };\n    return foodCosts[budget] || foodCosts.medium;\n  }\n  getLocalTransportCost() {\n    return 500; // Average local transport per day\n  }\n\n  // Generate detailed day activities\n  generateDayActivity(location, dayNumber, budget) {\n    const attractions = this.getLocationAttractions(location.id || location.name);\n    const selectedAttractions = attractions.slice(dayNumber * 2, (dayNumber + 1) * 2);\n    return {\n      description: `Day ${dayNumber + 1} in ${location.name}: ${selectedAttractions.map(a => a.name).join(', ')}`,\n      highlights: selectedAttractions,\n      attractionCosts: selectedAttractions.reduce((sum, attr) => sum + (attr.entryCost || 0), 0)\n    };\n  }\n\n  // Get location-specific attractions with costs\n  getLocationAttractions(locationId) {\n    const attractions = {\n      'delhi': [{\n        name: 'Red Fort',\n        entryCost: 35,\n        time: '3 hours'\n      }, {\n        name: 'India Gate',\n        entryCost: 0,\n        time: '1 hour'\n      }, {\n        name: 'Qutub Minar',\n        entryCost: 30,\n        time: '2 hours'\n      }, {\n        name: 'Lotus Temple',\n        entryCost: 0,\n        time: '1 hour'\n      }],\n      'taj-mahal': [{\n        name: 'Taj Mahal',\n        entryCost: 50,\n        time: '4 hours'\n      }, {\n        name: 'Agra Fort',\n        entryCost: 40,\n        time: '3 hours'\n      }, {\n        name: 'Mehtab Bagh',\n        entryCost: 25,\n        time: '2 hours'\n      }],\n      'jaipur': [{\n        name: 'Amber Fort',\n        entryCost: 25,\n        time: '4 hours'\n      }, {\n        name: 'City Palace',\n        entryCost: 30,\n        time: '3 hours'\n      }, {\n        name: 'Hawa Mahal',\n        entryCost: 15,\n        time: '1 hour'\n      }]\n    };\n    const normalizedId = (locationId === null || locationId === void 0 ? void 0 : locationId.toLowerCase().replace(/\\s+/g, '-')) || 'default';\n    return attractions[normalizedId] || [{\n      name: 'Main Attraction',\n      entryCost: 25,\n      time: '3 hours'\n    }, {\n      name: 'Local Temple',\n      entryCost: 10,\n      time: '2 hours'\n    }, {\n      name: 'Cultural Site',\n      entryCost: 20,\n      time: '2 hours'\n    }];\n  }\n\n  // Get accurate travel details between locations\n  getAccurateTravelDetails(from, to, mode) {\n    const fromCoords = this.getLocationCoordinates(from);\n    const toCoords = this.getLocationCoordinates(to);\n    const distance = this.calculateHaversineDistance(fromCoords, toCoords);\n    const transportMode = mode || 'car';\n    const costPerKm = this.transportationCosts[transportMode] || this.transportationCosts.car;\n    const baseCost = distance * costPerKm;\n\n    // Calculate travel time based on mode\n    const speeds = {\n      car: 60,\n      train: 80,\n      bus: 50,\n      flight: 500\n    }; // km/h\n    const speed = speeds[transportMode] || speeds.car;\n    const travelTimeHours = Math.ceil(distance / speed);\n    return {\n      mode: transportMode,\n      distance: distance,\n      duration: `${travelTimeHours} hours`,\n      cost: Math.round(baseCost),\n      mealCost: travelTimeHours > 4 ? 300 : 0\n    };\n  }\n\n  // Get cultural insights for location\n  getCulturalInsights(location) {\n    return [`Rich cultural heritage dating back centuries`, `Architectural significance in ${location.dynasty || 'regional'} style`, `Important pilgrimage and tourism destination`];\n  }\n\n  // Get practical tips\n  getPracticalTips(location) {\n    return ['Best visited early morning or late afternoon', 'Respect local customs and dress codes', 'Hire local guides for deeper insights', 'Carry water and comfortable walking shoes'];\n  }\n\n  // Extract cultural themes from path\n  extractCulturalThemes(path) {\n    const themes = new Set();\n    path.forEach(location => {\n      if (location.dynasty) themes.add(location.dynasty);\n      if (location.category) themes.add(location.category);\n      if (location.tags) location.tags.forEach(tag => themes.add(tag));\n    });\n    return Array.from(themes);\n  }\n\n  // Calculate total distance\n  calculateTotalDistance(path) {\n    let totalDistance = 0;\n    for (let i = 0; i < path.length - 1; i++) {\n      const current = this.getLocationCoordinates(path[i]);\n      const next = this.getLocationCoordinates(path[i + 1]);\n      totalDistance += this.calculateHaversineDistance(current, next);\n    }\n    return totalDistance;\n  }\n\n  // Calculate cultural diversity score\n  calculateCulturalDiversity(path) {\n    const themes = this.extractCulturalThemes(path);\n    return Math.min(themes.length * 10, 100); // Max 100%\n  }\n\n  // Calculate cost efficiency\n  calculateCostEfficiency(totalCost, numLocations) {\n    const costPerLocation = totalCost / numLocations;\n    return costPerLocation < 5000 ? 'High' : costPerLocation < 8000 ? 'Medium' : 'Low';\n  }\n}","map":{"version":3,"names":["UltraAccurateRoutePlanner","constructor","locations","routes","realDistanceMatrix","transportationCosts","accommodationCosts","low","medium","high","seasonalData","months","bestRegions","temperature","min","max","rainfall","avoidRegions","createUltraAccurateRoute","preferences","console","log","interests","max_travel_days","budget_range","preferred_season","start_location","transport_mode","candidateLocations","filterLocationsByInterests","length","Error","optimizedPath","optimizePath","detailedItinerary","createDetailedItinerary","slice","filteredLocations","filter","location","locationTags","tags","locationCategory","category","locationDescription","description","some","interest","tag","toLowerCase","includes","popularDestinations","loc","id","startLocation","maxDays","maxLocations","Math","ceil","limitedLocations","remainingLocations","currentLocation","findNearestLocation","push","currentIndex","indexOf","splice","currentCoords","getLocationCoordinates","nearestLocation","shortestDistance","Infinity","forEach","locCoords","distance","calculateHaversineDistance","nearestIndex","point","nearest","coordinates","lat","lng","Array","isArray","coord1","coord2","R","lat1","lng1","lat2","lng2","dLat","PI","dLng","a","sin","cos","c","atan2","sqrt","round","path","transportMode","budget","itinerary","currentDay","totalCost","i","nextLocation","daysAtLocation","getOptimalDaysAtLocation","dailyCost","getAccommodationCost","name","getFoodCost","getLocalTransportCost","day","dayActivity","generateDayActivity","type","highlights","costs","accommodation","food","localTransport","attractions","attractionCosts","total","culturalInsights","getCulturalInsights","practicalTips","getPracticalTips","travelDetails","getAccurateTravelDetails","mode","transport","cost","mealCost","Date","now","color","map","coords","totalDays","culturalThemes","extractCulturalThemes","optimizationMetrics","totalDistance","calculateTotalDistance","culturalDiversity","calculateCulturalDiversity","costEfficiency","calculateCostEfficiency","_location$name","locationName","majorDestinations","dest","complexSites","site","locationId","normalizedId","replace","foodCosts","dayNumber","getLocationAttractions","selectedAttractions","join","reduce","sum","attr","entryCost","time","from","to","fromCoords","toCoords","costPerKm","car","baseCost","speeds","train","bus","flight","speed","travelTimeHours","duration","dynasty","themes","Set","add","current","next","numLocations","costPerLocation"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/utils/enhancedRoutePlanner.js"],"sourcesContent":["// cupe-kg-frontend/src/utils/enhancedRoutePlanner.js\r\n// FIXED VERSION - Replace your entire enhancedRoutePlanner.js with this\r\n\r\nexport class UltraAccurateRoutePlanner {\r\n  constructor(locations, routes) {\r\n    this.locations = locations || [];\r\n    this.routes = routes || [];\r\n    \r\n    // Real distance matrix (in km) between major Indian cities\r\n    this.realDistanceMatrix = {\r\n      'delhi': {\r\n        'jaipur': 280, 'agra': 233, 'varanasi': 821, 'amritsar': 460,\r\n        'hampi': 1483, 'udaipur': 421, 'khajuraho': 620, 'bodh-gaya': 1105\r\n      },\r\n      'jaipur': {\r\n        'delhi': 280, 'udaipur': 393, 'taj-mahal': 240, 'ajanta': 739\r\n      },\r\n      'taj-mahal': {\r\n        'delhi': 233, 'jaipur': 240, 'khajuraho': 295, 'varanasi': 605\r\n      },\r\n      'varanasi': {\r\n        'delhi': 821, 'bodh-gaya': 250, 'khajuraho': 298, 'kolkata': 679,\r\n        'agra': 605\r\n      },\r\n      'bodh-gaya': {\r\n        'varanasi': 250, 'delhi': 1105, 'kolkata': 495, 'patna': 135\r\n      },\r\n      'hampi': {\r\n        'delhi': 1483, 'madurai': 440\r\n      },\r\n      'madurai': {\r\n        'hampi': 440, 'chennai': 462, 'bangalore': 460, 'kochi': 257\r\n      },\r\n      'amritsar': {\r\n        'delhi': 460, 'chandigarh': 230, 'shimla': 350\r\n      },\r\n      'udaipur': {\r\n        'jaipur': 393, 'delhi': 421, 'mumbai': 734, 'ajanta': 451\r\n      },\r\n      'konark': {\r\n        'bhubaneswar': 65, 'kolkata': 380, 'delhi': 1108\r\n      },\r\n      'ajanta': {\r\n        'ellora': 95, 'mumbai': 440, 'pune': 240, 'udaipur': 451\r\n      },\r\n      'ellora': {\r\n        'ajanta': 95, 'mumbai': 380, 'pune': 220\r\n      }\r\n    };\r\n\r\n    // Transportation costs (INR per km)\r\n    this.transportationCosts = {\r\n      'flight': 3.5,\r\n      'train': 0.75,\r\n      'bus': 0.45,\r\n      'car': 12\r\n    };\r\n\r\n    // Accommodation costs by city (per night)\r\n    this.accommodationCosts = {\r\n      'delhi': { low: 1200, medium: 3500, high: 8500 },\r\n      'jaipur': { low: 800, medium: 2500, high: 6500 },\r\n      'taj-mahal': { low: 900, medium: 2800, high: 7000 },\r\n      'varanasi': { low: 600, medium: 1800, high: 4500 },\r\n      'amritsar': { low: 700, medium: 2000, high: 5000 },\r\n      'udaipur': { low: 1000, medium: 3200, high: 8000 },\r\n      'hampi': { low: 500, medium: 1500, high: 3500 },\r\n      'madurai': { low: 600, medium: 1800, high: 4000 },\r\n      'bodh-gaya': { low: 400, medium: 1200, high: 2800 },\r\n      'konark': { low: 600, medium: 1600, high: 3500 },\r\n      'mahabalipuram': { low: 800, medium: 2200, high: 5500 },\r\n      'ajanta': { low: 600, medium: 1600, high: 3800 },\r\n      'ellora': { low: 600, medium: 1600, high: 3800 },\r\n      'khajuraho': { low: 700, medium: 2000, high: 4500 }\r\n    };\r\n\r\n    // Weather and seasonal data\r\n    this.seasonalData = {\r\n      'winter': {\r\n        months: ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar'],\r\n        bestRegions: ['north', 'central', 'west', 'south'],\r\n        temperature: { min: 10, max: 25 },\r\n        rainfall: 'minimal'\r\n      },\r\n      'summer': {\r\n        months: ['Apr', 'May', 'Jun'],\r\n        bestRegions: ['hills', 'north-east'],\r\n        avoidRegions: ['rajasthan', 'central'],\r\n        temperature: { min: 25, max: 45 },\r\n        rainfall: 'none'\r\n      },\r\n      'monsoon': {\r\n        months: ['Jul', 'Aug', 'Sep'],\r\n        bestRegions: ['western-ghats', 'caves'],\r\n        temperature: { min: 20, max: 30 },\r\n        rainfall: 'heavy'\r\n      }\r\n    };\r\n  }\r\n\r\n  // Main route creation function\r\n  createUltraAccurateRoute(preferences) {\r\n    console.log('Creating ultra-accurate route with preferences:', preferences);\r\n    \r\n    const {\r\n      interests = [],\r\n      max_travel_days = 7,\r\n      budget_range = 'medium',\r\n      preferred_season = 'winter',\r\n      start_location = null,\r\n      transport_mode = 'car'\r\n    } = preferences;\r\n\r\n    // Step 1: Filter locations by interests\r\n    const candidateLocations = this.filterLocationsByInterests(interests);\r\n    console.log('Candidate locations found:', candidateLocations.length);\r\n    \r\n    if (candidateLocations.length === 0) {\r\n      throw new Error('No locations found matching your interests');\r\n    }\r\n\r\n    // Step 2: Create optimized path\r\n    const optimizedPath = this.optimizePath(candidateLocations, start_location, max_travel_days);\r\n    console.log('Optimized path created:', optimizedPath.length, 'locations');\r\n    \r\n    if (optimizedPath.length === 0) {\r\n      throw new Error('Could not create an optimized path with your preferences');\r\n    }\r\n\r\n    // Step 3: Generate detailed itinerary\r\n    const detailedItinerary = this.createDetailedItinerary(optimizedPath, transport_mode, budget_range);\r\n    \r\n    return detailedItinerary;\r\n  }\r\n\r\n  // Filter locations based on interests\r\n  filterLocationsByInterests(interests) {\r\n    if (!interests || interests.length === 0) {\r\n      return this.locations.slice(0, 8); // Return first 8 locations as default\r\n    }\r\n\r\n    const filteredLocations = this.locations.filter(location => {\r\n      const locationTags = location.tags || [];\r\n      const locationCategory = location.category || '';\r\n      const locationDescription = location.description || '';\r\n      \r\n      return interests.some(interest => {\r\n        return locationTags.some(tag => tag.toLowerCase().includes(interest.toLowerCase())) ||\r\n               locationCategory.toLowerCase().includes(interest.toLowerCase()) ||\r\n               locationDescription.toLowerCase().includes(interest.toLowerCase());\r\n      });\r\n    });\r\n\r\n    // If filtered results are too few, add some popular destinations\r\n    if (filteredLocations.length < 3) {\r\n      const popularDestinations = this.locations.filter(loc => \r\n        ['taj-mahal', 'delhi', 'jaipur', 'varanasi', 'hampi'].includes(loc.id)\r\n      );\r\n      return [...filteredLocations, ...popularDestinations].slice(0, 8);\r\n    }\r\n\r\n    return filteredLocations.slice(0, 10);\r\n  }\r\n\r\n  // Optimize path based on distance and travel time\r\n  optimizePath(locations, startLocation, maxDays) {\r\n    if (!locations || locations.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Limit locations based on travel days (roughly 1-2 locations per day)\r\n    const maxLocations = Math.min(locations.length, Math.ceil(maxDays / 1.5));\r\n    const limitedLocations = locations.slice(0, maxLocations);\r\n    \r\n    if (limitedLocations.length <= 1) {\r\n      return limitedLocations;\r\n    }\r\n\r\n    // Simple nearest neighbor optimization\r\n    const optimizedPath = [];\r\n    const remainingLocations = [...limitedLocations];\r\n    \r\n    // Start with location closest to start point or first location\r\n    let currentLocation;\r\n    if (startLocation) {\r\n      currentLocation = this.findNearestLocation(remainingLocations, startLocation);\r\n    } else {\r\n      currentLocation = remainingLocations[0];\r\n    }\r\n    \r\n    optimizedPath.push(currentLocation);\r\n    const currentIndex = remainingLocations.indexOf(currentLocation);\r\n    remainingLocations.splice(currentIndex, 1);\r\n\r\n    // Add nearest neighbors\r\n    while (remainingLocations.length > 0 && optimizedPath.length < maxLocations) {\r\n      const currentCoords = this.getLocationCoordinates(currentLocation);\r\n      let nearestLocation = null;\r\n      let shortestDistance = Infinity;\r\n\r\n      remainingLocations.forEach(loc => {\r\n        const locCoords = this.getLocationCoordinates(loc);\r\n        const distance = this.calculateHaversineDistance(currentCoords, locCoords);\r\n        \r\n        if (distance < shortestDistance) {\r\n          shortestDistance = distance;\r\n          nearestLocation = loc;\r\n        }\r\n      });\r\n\r\n      if (nearestLocation) {\r\n        optimizedPath.push(nearestLocation);\r\n        currentLocation = nearestLocation;\r\n        const nearestIndex = remainingLocations.indexOf(nearestLocation);\r\n        remainingLocations.splice(nearestIndex, 1);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return optimizedPath;\r\n  }\r\n\r\n  // Find nearest location to a given point\r\n  findNearestLocation(locations, point) {\r\n    let nearest = locations[0];\r\n    let shortestDistance = Infinity;\r\n\r\n    locations.forEach(location => {\r\n      const locCoords = this.getLocationCoordinates(location);\r\n      const distance = this.calculateHaversineDistance(point, locCoords);\r\n      \r\n      if (distance < shortestDistance) {\r\n        shortestDistance = distance;\r\n        nearest = location;\r\n      }\r\n    });\r\n\r\n    return nearest;\r\n  }\r\n\r\n  // Get coordinates from location object\r\n  getLocationCoordinates(location) {\r\n    if (location.coordinates) {\r\n      if (typeof location.coordinates === 'object' && location.coordinates.lat) {\r\n        return { lat: location.coordinates.lat, lng: location.coordinates.lng };\r\n      } else if (Array.isArray(location.coordinates)) {\r\n        return { lat: location.coordinates[0], lng: location.coordinates[1] };\r\n      }\r\n    }\r\n    \r\n    // Fallback coordinates if not available\r\n    return { lat: 28.6139, lng: 77.2090 }; // Delhi coordinates as fallback\r\n  }\r\n\r\n  // Calculate Haversine distance\r\n  calculateHaversineDistance(coord1, coord2) {\r\n    const R = 6371; // Earth's radius in km\r\n    const lat1 = coord1.lat || coord1[0] || 0;\r\n    const lng1 = coord1.lng || coord1[1] || 0;\r\n    const lat2 = coord2.lat || coord2[0] || 0;\r\n    const lng2 = coord2.lng || coord2[1] || 0;\r\n    \r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    \r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n              Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return Math.round(R * c);\r\n  }\r\n\r\n  // Create detailed itinerary\r\n  createDetailedItinerary(path, transportMode, budget) {\r\n    const itinerary = [];\r\n    let currentDay = 1;\r\n    let totalCost = 0;\r\n    \r\n    for (let i = 0; i < path.length; i++) {\r\n      const location = path[i];\r\n      const nextLocation = path[i + 1];\r\n      \r\n      // Location exploration days - THIS IS THE MISSING METHOD\r\n      const daysAtLocation = this.getOptimalDaysAtLocation(location);\r\n      const dailyCost = this.getAccommodationCost(location.id || location.name, budget) + \r\n                       this.getFoodCost(budget) + \r\n                       this.getLocalTransportCost();\r\n      \r\n      for (let day = 0; day < daysAtLocation; day++) {\r\n        const dayActivity = this.generateDayActivity(location, day, budget);\r\n        itinerary.push({\r\n          day: currentDay + day,\r\n          location: location.name,\r\n          type: 'exploration',\r\n          description: dayActivity.description,\r\n          highlights: dayActivity.highlights,\r\n          costs: {\r\n            accommodation: this.getAccommodationCost(location.id || location.name, budget),\r\n            food: this.getFoodCost(budget),\r\n            localTransport: this.getLocalTransportCost(),\r\n            attractions: dayActivity.attractionCosts,\r\n            total: dailyCost + dayActivity.attractionCosts\r\n          },\r\n          culturalInsights: this.getCulturalInsights(location),\r\n          practicalTips: this.getPracticalTips(location)\r\n        });\r\n        totalCost += dailyCost + dayActivity.attractionCosts;\r\n      }\r\n      \r\n      currentDay += daysAtLocation;\r\n      \r\n      // Travel day\r\n      if (nextLocation) {\r\n        const travelDetails = this.getAccurateTravelDetails(location, nextLocation, transportMode);\r\n        itinerary.push({\r\n          day: currentDay,\r\n          location: `${location.name} to ${nextLocation.name}`,\r\n          type: 'travel',\r\n          description: `Travel from ${location.name} to ${nextLocation.name} via ${travelDetails.mode}`,\r\n          travelDetails: travelDetails,\r\n          costs: {\r\n            transport: travelDetails.cost,\r\n            food: travelDetails.mealCost || 0,\r\n            total: travelDetails.cost + (travelDetails.mealCost || 0)\r\n          }\r\n        });\r\n        totalCost += travelDetails.cost + (travelDetails.mealCost || 0);\r\n        currentDay++;\r\n      }\r\n    }\r\n    \r\n    return {\r\n      id: `ultra-accurate-${Date.now()}`,\r\n      name: 'Your Culturally Intelligent Route',\r\n      description: `Scientifically optimized ${path.length}-destination route with cultural depth`,\r\n      color: '#2196F3',\r\n      path: path.map(loc => {\r\n        const coords = this.getLocationCoordinates(loc);\r\n        return [coords.lat, coords.lng];\r\n      }),\r\n      locations: path.map(loc => {\r\n        const coords = this.getLocationCoordinates(loc);\r\n        return {\r\n          name: loc.name,\r\n          coordinates: [coords.lat, coords.lng],\r\n          description: loc.description || 'Cultural heritage site'\r\n        };\r\n      }),\r\n      detailedItinerary: itinerary,\r\n      totalCost: Math.round(totalCost),\r\n      totalDays: currentDay - 1,\r\n      culturalThemes: this.extractCulturalThemes(path),\r\n      optimizationMetrics: {\r\n        totalDistance: this.calculateTotalDistance(path),\r\n        culturalDiversity: this.calculateCulturalDiversity(path),\r\n        costEfficiency: this.calculateCostEfficiency(totalCost, path.length)\r\n      }\r\n    };\r\n  }\r\n\r\n  // THE MISSING METHOD - Calculate optimal days at each location\r\n  getOptimalDaysAtLocation(location) {\r\n    // Default to 2 days, but adjust based on location importance and attractions\r\n    const locationName = location.name?.toLowerCase() || '';\r\n    \r\n    // Major destinations that need more time\r\n    const majorDestinations = ['delhi', 'rajasthan', 'taj mahal', 'varanasi', 'hampi'];\r\n    if (majorDestinations.some(dest => locationName.includes(dest))) {\r\n      return 3;\r\n    }\r\n    \r\n    // UNESCO sites or complex sites\r\n    const complexSites = ['ajanta', 'ellora', 'khajuraho', 'konark'];\r\n    if (complexSites.some(site => locationName.includes(site))) {\r\n      return 2;\r\n    }\r\n    \r\n    // Default for most locations\r\n    return 2;\r\n  }\r\n\r\n  // Helper methods for accurate cost calculation\r\n  getAccommodationCost(locationId, budget) {\r\n    const normalizedId = locationId?.toLowerCase().replace(/\\s+/g, '-') || 'default';\r\n    const costs = this.accommodationCosts[normalizedId] || { low: 800, medium: 2500, high: 6000 };\r\n    return costs[budget] || costs.medium;\r\n  }\r\n\r\n  getFoodCost(budget) {\r\n    const foodCosts = { low: 800, medium: 1500, high: 3000 };\r\n    return foodCosts[budget] || foodCosts.medium;\r\n  }\r\n\r\n  getLocalTransportCost() {\r\n    return 500; // Average local transport per day\r\n  }\r\n\r\n  // Generate detailed day activities\r\n  generateDayActivity(location, dayNumber, budget) {\r\n    const attractions = this.getLocationAttractions(location.id || location.name);\r\n    const selectedAttractions = attractions.slice(dayNumber * 2, (dayNumber + 1) * 2);\r\n    \r\n    return {\r\n      description: `Day ${dayNumber + 1} in ${location.name}: ${selectedAttractions.map(a => a.name).join(', ')}`,\r\n      highlights: selectedAttractions,\r\n      attractionCosts: selectedAttractions.reduce((sum, attr) => sum + (attr.entryCost || 0), 0)\r\n    };\r\n  }\r\n\r\n  // Get location-specific attractions with costs\r\n  getLocationAttractions(locationId) {\r\n    const attractions = {\r\n      'delhi': [\r\n        { name: 'Red Fort', entryCost: 35, time: '3 hours' },\r\n        { name: 'India Gate', entryCost: 0, time: '1 hour' },\r\n        { name: 'Qutub Minar', entryCost: 30, time: '2 hours' },\r\n        { name: 'Lotus Temple', entryCost: 0, time: '1 hour' }\r\n      ],\r\n      'taj-mahal': [\r\n        { name: 'Taj Mahal', entryCost: 50, time: '4 hours' },\r\n        { name: 'Agra Fort', entryCost: 40, time: '3 hours' },\r\n        { name: 'Mehtab Bagh', entryCost: 25, time: '2 hours' }\r\n      ],\r\n      'jaipur': [\r\n        { name: 'Amber Fort', entryCost: 25, time: '4 hours' },\r\n        { name: 'City Palace', entryCost: 30, time: '3 hours' },\r\n        { name: 'Hawa Mahal', entryCost: 15, time: '1 hour' }\r\n      ]\r\n    };\r\n\r\n    const normalizedId = locationId?.toLowerCase().replace(/\\s+/g, '-') || 'default';\r\n    return attractions[normalizedId] || [\r\n      { name: 'Main Attraction', entryCost: 25, time: '3 hours' },\r\n      { name: 'Local Temple', entryCost: 10, time: '2 hours' },\r\n      { name: 'Cultural Site', entryCost: 20, time: '2 hours' }\r\n    ];\r\n  }\r\n\r\n  // Get accurate travel details between locations\r\n  getAccurateTravelDetails(from, to, mode) {\r\n    const fromCoords = this.getLocationCoordinates(from);\r\n    const toCoords = this.getLocationCoordinates(to);\r\n    const distance = this.calculateHaversineDistance(fromCoords, toCoords);\r\n    \r\n    const transportMode = mode || 'car';\r\n    const costPerKm = this.transportationCosts[transportMode] || this.transportationCosts.car;\r\n    const baseCost = distance * costPerKm;\r\n    \r\n    // Calculate travel time based on mode\r\n    const speeds = { car: 60, train: 80, bus: 50, flight: 500 }; // km/h\r\n    const speed = speeds[transportMode] || speeds.car;\r\n    const travelTimeHours = Math.ceil(distance / speed);\r\n    \r\n    return {\r\n      mode: transportMode,\r\n      distance: distance,\r\n      duration: `${travelTimeHours} hours`,\r\n      cost: Math.round(baseCost),\r\n      mealCost: travelTimeHours > 4 ? 300 : 0\r\n    };\r\n  }\r\n\r\n  // Get cultural insights for location\r\n  getCulturalInsights(location) {\r\n    return [\r\n      `Rich cultural heritage dating back centuries`,\r\n      `Architectural significance in ${location.dynasty || 'regional'} style`,\r\n      `Important pilgrimage and tourism destination`\r\n    ];\r\n  }\r\n\r\n  // Get practical tips\r\n  getPracticalTips(location) {\r\n    return [\r\n      'Best visited early morning or late afternoon',\r\n      'Respect local customs and dress codes',\r\n      'Hire local guides for deeper insights',\r\n      'Carry water and comfortable walking shoes'\r\n    ];\r\n  }\r\n\r\n  // Extract cultural themes from path\r\n  extractCulturalThemes(path) {\r\n    const themes = new Set();\r\n    path.forEach(location => {\r\n      if (location.dynasty) themes.add(location.dynasty);\r\n      if (location.category) themes.add(location.category);\r\n      if (location.tags) location.tags.forEach(tag => themes.add(tag));\r\n    });\r\n    return Array.from(themes);\r\n  }\r\n\r\n  // Calculate total distance\r\n  calculateTotalDistance(path) {\r\n    let totalDistance = 0;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n      const current = this.getLocationCoordinates(path[i]);\r\n      const next = this.getLocationCoordinates(path[i + 1]);\r\n      totalDistance += this.calculateHaversineDistance(current, next);\r\n    }\r\n    return totalDistance;\r\n  }\r\n\r\n  // Calculate cultural diversity score\r\n  calculateCulturalDiversity(path) {\r\n    const themes = this.extractCulturalThemes(path);\r\n    return Math.min(themes.length * 10, 100); // Max 100%\r\n  }\r\n\r\n  // Calculate cost efficiency\r\n  calculateCostEfficiency(totalCost, numLocations) {\r\n    const costPerLocation = totalCost / numLocations;\r\n    return costPerLocation < 5000 ? 'High' : costPerLocation < 8000 ? 'Medium' : 'Low';\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}