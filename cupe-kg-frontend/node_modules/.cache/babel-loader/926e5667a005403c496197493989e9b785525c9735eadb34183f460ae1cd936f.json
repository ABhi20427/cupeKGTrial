{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY projects\\\\Major Project\\\\cupe-kg-frontend\\\\src\\\\components\\\\GraphVisualization\\\\GraphVisualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useMapContext } from '../../context/MapContext';\nimport './GraphVisualization.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  isVisible,\n  onNodeClick\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const {\n    locations,\n    selectLocation\n  } = useMapContext();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [activeNode, setActiveNode] = useState(null);\n  const animationRef = useRef(null);\n  const colors = {\n    historical: '#E91E63',\n    // Pink\n    cultural: '#4CAF50',\n    // Green\n    religious: '#FFC107',\n    // Amber\n    node: '#3f51b5',\n    // Default node\n    edge: 'rgba(255, 255, 255, 0.2)',\n    text: '#ffffff'\n  };\n\n  // Generate nodes and edges from location data\n  useEffect(() => {\n    if (!locations.length) return;\n\n    // Create nodes from locations\n    const newNodes = locations.map((location, index) => {\n      // Generate a position based on category (cluster similar types)\n      const angle = index / locations.length * Math.PI * 2;\n      const radius = 150 + Math.random() * 100;\n      return {\n        id: location.id,\n        name: location.name,\n        category: location.category,\n        x: Math.cos(angle) * radius + 400,\n        // center x\n        y: Math.sin(angle) * radius + 300,\n        // center y\n        radius: 20,\n        color: colors[location.category] || colors.node,\n        adjacentNodes: []\n      };\n    });\n\n    // Generate edges between nodes based on relationships (category, proximity)\n    const newEdges = [];\n\n    // Connect nodes of same category\n    for (let i = 0; i < newNodes.length; i++) {\n      for (let j = i + 1; j < newNodes.length; j++) {\n        const sourceNode = newNodes[i];\n        const targetNode = newNodes[j];\n\n        // Connect nodes of same category with stronger links\n        if (sourceNode.category === targetNode.category) {\n          const edge = {\n            source: sourceNode.id,\n            target: targetNode.id,\n            strength: 0.8,\n            width: 2,\n            color: sourceNode.color,\n            alpha: 0.6\n          };\n          newEdges.push(edge);\n          sourceNode.adjacentNodes.push(targetNode.id);\n          targetNode.adjacentNodes.push(sourceNode.id);\n        }\n        // Connect some nodes with weaker links for network effect\n        else if (Math.random() > 0.7) {\n          const edge = {\n            source: sourceNode.id,\n            target: targetNode.id,\n            strength: 0.3,\n            width: 1,\n            color: 'rgba(255, 255, 255, 0.3)',\n            alpha: 0.3\n          };\n          newEdges.push(edge);\n          sourceNode.adjacentNodes.push(targetNode.id);\n          targetNode.adjacentNodes.push(sourceNode.id);\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [locations]);\n\n  // Handle animation and rendering\n  useEffect(() => {\n    if (!isVisible || !canvasRef.current || !nodes.length) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Set canvas dimensions\n    const updateCanvasSize = () => {\n      canvas.width = canvas.offsetWidth * pixelRatio;\n      canvas.height = canvas.offsetHeight * pixelRatio;\n      ctx.scale(pixelRatio, pixelRatio);\n    };\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n\n    // Animation state\n    let animationActive = true;\n\n    // Perform physics simulation (simplified)\n    const updatePositions = () => {\n      // Add some forces to make the graph more dynamic\n      for (let i = 0; i < nodes.length; i++) {\n        // Add small random movement\n        nodes[i].x += (Math.random() - 0.5) * 0.5;\n        nodes[i].y += (Math.random() - 0.5) * 0.5;\n\n        // Keep nodes within bounds\n        if (nodes[i].x < nodes[i].radius) nodes[i].x = nodes[i].radius;\n        if (nodes[i].y < nodes[i].radius) nodes[i].y = nodes[i].radius;\n        if (nodes[i].x > canvas.offsetWidth - nodes[i].radius) nodes[i].x = canvas.offsetWidth - nodes[i].radius;\n        if (nodes[i].y > canvas.offsetHeight - nodes[i].radius) nodes[i].y = canvas.offsetHeight - nodes[i].radius;\n      }\n    };\n\n    // Draw the graph\n    const drawGraph = () => {\n      if (!animationActive) return;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n\n      // Draw background gradient\n      const gradient = ctx.createRadialGradient(canvas.offsetWidth / 2, canvas.offsetHeight / 2, 10, canvas.offsetWidth / 2, canvas.offsetHeight / 2, canvas.offsetWidth / 2);\n      gradient.addColorStop(0, 'rgba(25, 25, 35, 0.9)');\n      gradient.addColorStop(1, 'rgba(10, 10, 20, 0.95)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n\n      // Draw edges first (so they appear under nodes)\n      edges.forEach(edge => {\n        const source = nodes.find(n => n.id === edge.source);\n        const target = nodes.find(n => n.id === edge.target);\n        if (!source || !target) return;\n\n        // Highlight edges connected to hovered node\n        let alpha = edge.alpha;\n        if (hoveredNode && (hoveredNode.id === source.id || hoveredNode.id === target.id)) {\n          alpha = 0.8; // Increase opacity for connected edges\n        }\n        ctx.beginPath();\n        ctx.moveTo(source.x, source.y);\n        ctx.lineTo(target.x, target.y);\n\n        // Use gradient for edges\n        const edgeGradient = ctx.createLinearGradient(source.x, source.y, target.x, target.y);\n        edgeGradient.addColorStop(0, source.color.replace(')', ', ' + alpha + ')').replace('rgb', 'rgba'));\n        edgeGradient.addColorStop(1, target.color.replace(')', ', ' + alpha + ')').replace('rgb', 'rgba'));\n        ctx.strokeStyle = edgeGradient;\n        ctx.lineWidth = edge.width;\n        ctx.stroke();\n      });\n\n      // Draw nodes\n      nodes.forEach(node => {\n        // Node fill with glow effect\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);\n\n        // Add glow effect for hovered/active nodes\n        if (hoveredNode === node || activeNode === node) {\n          ctx.shadowColor = node.color;\n          ctx.shadowBlur = 15;\n          ctx.fillStyle = node.color;\n        } else {\n          ctx.shadowBlur = 0;\n          // Semi-transparent fill\n          ctx.fillStyle = node.color.replace(')', ', 0.7)').replace('rgb', 'rgba');\n        }\n        ctx.fill();\n\n        // Node border\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Draw node label\n        ctx.font = '14px Arial';\n        ctx.fillStyle = colors.text;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(node.name, node.x, node.y + node.radius + 15);\n\n        // Reset shadow for next elements\n        ctx.shadowBlur = 0;\n      });\n\n      // Update positions for next frame\n      updatePositions();\n\n      // Continue animation loop\n      animationRef.current = requestAnimationFrame(drawGraph);\n    };\n    drawGraph();\n\n    // Handle mousemove for hover effects\n    const handleMouseMove = e => {\n      const rect = canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      // Check if mouse is over any node\n      let foundNode = null;\n      for (const node of nodes) {\n        const distance = Math.hypot(node.x - x, node.y - y);\n        if (distance <= node.radius) {\n          foundNode = node;\n          break;\n        }\n      }\n      setHoveredNode(foundNode);\n      document.body.style.cursor = foundNode ? 'pointer' : 'default';\n    };\n\n    // Handle click to select a node/location\n    const handleClick = e => {\n      if (hoveredNode) {\n        setActiveNode(hoveredNode);\n        const location = locations.find(loc => loc.id === hoveredNode.id);\n        if (location && onNodeClick) {\n          onNodeClick(location);\n        }\n      }\n    };\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('click', handleClick);\n    return () => {\n      animationActive = false;\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      window.removeEventListener('resize', updateCanvasSize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('click', handleClick);\n    };\n  }, [isVisible, nodes, edges, hoveredNode, activeNode, locations, onNodeClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `graph-container ${isVisible ? 'visible' : 'hidden'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"graph-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-title\",\n        children: \"CuPe-KG Knowledge Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: colors.historical\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-label\",\n            children: \"Historical Sites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: colors.cultural\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-label\",\n            children: \"Cultural Sites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: colors.religious\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-label\",\n            children: \"Religious Sites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"H8lmOvUsy0NOqWIKH5s3mhUdghA=\", false, function () {\n  return [useMapContext];\n});\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMapContext","jsxDEV","_jsxDEV","GraphVisualization","isVisible","onNodeClick","_s","canvasRef","locations","selectLocation","nodes","setNodes","edges","setEdges","hoveredNode","setHoveredNode","activeNode","setActiveNode","animationRef","colors","historical","cultural","religious","node","edge","text","length","newNodes","map","location","index","angle","Math","PI","radius","random","id","name","category","x","cos","y","sin","color","adjacentNodes","newEdges","i","j","sourceNode","targetNode","source","target","strength","width","alpha","push","current","canvas","ctx","getContext","pixelRatio","window","devicePixelRatio","updateCanvasSize","offsetWidth","height","offsetHeight","scale","addEventListener","animationActive","updatePositions","drawGraph","clearRect","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","forEach","find","n","beginPath","moveTo","lineTo","edgeGradient","createLinearGradient","replace","strokeStyle","lineWidth","stroke","arc","shadowColor","shadowBlur","fill","font","textAlign","textBaseline","fillText","requestAnimationFrame","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","foundNode","distance","hypot","document","body","style","cursor","handleClick","loc","cancelAnimationFrame","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","_c","$RefreshReg$"],"sources":["D:/MY projects/Major Project/cupe-kg-frontend/src/components/GraphVisualization/GraphVisualization.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useMapContext } from '../../context/MapContext';\r\nimport './GraphVisualization.css';\r\n\r\nconst GraphVisualization = ({ isVisible, onNodeClick }) => {\r\n  const canvasRef = useRef(null);\r\n  const { locations, selectLocation } = useMapContext();\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [hoveredNode, setHoveredNode] = useState(null);\r\n  const [activeNode, setActiveNode] = useState(null);\r\n  const animationRef = useRef(null);\r\n  \r\n  const colors = {\r\n    historical: '#E91E63', // Pink\r\n    cultural: '#4CAF50',   // Green\r\n    religious: '#FFC107',  // Amber\r\n    node: '#3f51b5',       // Default node\r\n    edge: 'rgba(255, 255, 255, 0.2)',\r\n    text: '#ffffff'\r\n  };\r\n\r\n  // Generate nodes and edges from location data\r\n  useEffect(() => {\r\n    if (!locations.length) return;\r\n    \r\n    // Create nodes from locations\r\n    const newNodes = locations.map((location, index) => {\r\n      // Generate a position based on category (cluster similar types)\r\n      const angle = (index / locations.length) * Math.PI * 2;\r\n      const radius = 150 + (Math.random() * 100);\r\n      \r\n      return {\r\n        id: location.id,\r\n        name: location.name,\r\n        category: location.category,\r\n        x: Math.cos(angle) * radius + 400, // center x\r\n        y: Math.sin(angle) * radius + 300, // center y\r\n        radius: 20,\r\n        color: colors[location.category] || colors.node,\r\n        adjacentNodes: []\r\n      };\r\n    });\r\n    \r\n    // Generate edges between nodes based on relationships (category, proximity)\r\n    const newEdges = [];\r\n    \r\n    // Connect nodes of same category\r\n    for (let i = 0; i < newNodes.length; i++) {\r\n      for (let j = i + 1; j < newNodes.length; j++) {\r\n        const sourceNode = newNodes[i];\r\n        const targetNode = newNodes[j];\r\n        \r\n        // Connect nodes of same category with stronger links\r\n        if (sourceNode.category === targetNode.category) {\r\n          const edge = {\r\n            source: sourceNode.id,\r\n            target: targetNode.id,\r\n            strength: 0.8,\r\n            width: 2,\r\n            color: sourceNode.color,\r\n            alpha: 0.6\r\n          };\r\n          newEdges.push(edge);\r\n          sourceNode.adjacentNodes.push(targetNode.id);\r\n          targetNode.adjacentNodes.push(sourceNode.id);\r\n        } \r\n        // Connect some nodes with weaker links for network effect\r\n        else if (Math.random() > 0.7) {\r\n          const edge = {\r\n            source: sourceNode.id,\r\n            target: targetNode.id,\r\n            strength: 0.3,\r\n            width: 1,\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            alpha: 0.3\r\n          };\r\n          newEdges.push(edge);\r\n          sourceNode.adjacentNodes.push(targetNode.id);\r\n          targetNode.adjacentNodes.push(sourceNode.id);\r\n        }\r\n      }\r\n    }\r\n    \r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  }, [locations]);\r\n\r\n  // Handle animation and rendering\r\n  useEffect(() => {\r\n    if (!isVisible || !canvasRef.current || !nodes.length) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const pixelRatio = window.devicePixelRatio || 1;\r\n    \r\n    // Set canvas dimensions\r\n    const updateCanvasSize = () => {\r\n      canvas.width = canvas.offsetWidth * pixelRatio;\r\n      canvas.height = canvas.offsetHeight * pixelRatio;\r\n      ctx.scale(pixelRatio, pixelRatio);\r\n    };\r\n    \r\n    updateCanvasSize();\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    \r\n    // Animation state\r\n    let animationActive = true;\r\n    \r\n    // Perform physics simulation (simplified)\r\n    const updatePositions = () => {\r\n      // Add some forces to make the graph more dynamic\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        // Add small random movement\r\n        nodes[i].x += (Math.random() - 0.5) * 0.5;\r\n        nodes[i].y += (Math.random() - 0.5) * 0.5;\r\n        \r\n        // Keep nodes within bounds\r\n        if (nodes[i].x < nodes[i].radius) nodes[i].x = nodes[i].radius;\r\n        if (nodes[i].y < nodes[i].radius) nodes[i].y = nodes[i].radius;\r\n        if (nodes[i].x > canvas.offsetWidth - nodes[i].radius) nodes[i].x = canvas.offsetWidth - nodes[i].radius;\r\n        if (nodes[i].y > canvas.offsetHeight - nodes[i].radius) nodes[i].y = canvas.offsetHeight - nodes[i].radius;\r\n      }\r\n    };\r\n    \r\n    // Draw the graph\r\n    const drawGraph = () => {\r\n      if (!animationActive) return;\r\n      \r\n      // Clear canvas\r\n      ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\r\n      \r\n      // Draw background gradient\r\n      const gradient = ctx.createRadialGradient(\r\n        canvas.offsetWidth/2, canvas.offsetHeight/2, 10,\r\n        canvas.offsetWidth/2, canvas.offsetHeight/2, canvas.offsetWidth/2\r\n      );\r\n      gradient.addColorStop(0, 'rgba(25, 25, 35, 0.9)');\r\n      gradient.addColorStop(1, 'rgba(10, 10, 20, 0.95)');\r\n      ctx.fillStyle = gradient;\r\n      ctx.fillRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\r\n      \r\n      // Draw edges first (so they appear under nodes)\r\n      edges.forEach(edge => {\r\n        const source = nodes.find(n => n.id === edge.source);\r\n        const target = nodes.find(n => n.id === edge.target);\r\n        if (!source || !target) return;\r\n        \r\n        // Highlight edges connected to hovered node\r\n        let alpha = edge.alpha;\r\n        if (hoveredNode && (hoveredNode.id === source.id || hoveredNode.id === target.id)) {\r\n          alpha = 0.8; // Increase opacity for connected edges\r\n        }\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(source.x, source.y);\r\n        ctx.lineTo(target.x, target.y);\r\n        \r\n        // Use gradient for edges\r\n        const edgeGradient = ctx.createLinearGradient(source.x, source.y, target.x, target.y);\r\n        edgeGradient.addColorStop(0, source.color.replace(')', ', ' + alpha + ')').replace('rgb', 'rgba'));\r\n        edgeGradient.addColorStop(1, target.color.replace(')', ', ' + alpha + ')').replace('rgb', 'rgba'));\r\n        \r\n        ctx.strokeStyle = edgeGradient;\r\n        ctx.lineWidth = edge.width;\r\n        ctx.stroke();\r\n      });\r\n      \r\n      // Draw nodes\r\n      nodes.forEach(node => {\r\n        // Node fill with glow effect\r\n        ctx.beginPath();\r\n        ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);\r\n        \r\n        // Add glow effect for hovered/active nodes\r\n        if (hoveredNode === node || activeNode === node) {\r\n          ctx.shadowColor = node.color;\r\n          ctx.shadowBlur = 15;\r\n          ctx.fillStyle = node.color;\r\n        } else {\r\n          ctx.shadowBlur = 0;\r\n          // Semi-transparent fill\r\n          ctx.fillStyle = node.color.replace(')', ', 0.7)').replace('rgb', 'rgba');\r\n        }\r\n        ctx.fill();\r\n        \r\n        // Node border\r\n        ctx.strokeStyle = '#ffffff';\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n        \r\n        // Draw node label\r\n        ctx.font = '14px Arial';\r\n        ctx.fillStyle = colors.text;\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(node.name, node.x, node.y + node.radius + 15);\r\n        \r\n        // Reset shadow for next elements\r\n        ctx.shadowBlur = 0;\r\n      });\r\n      \r\n      // Update positions for next frame\r\n      updatePositions();\r\n      \r\n      // Continue animation loop\r\n      animationRef.current = requestAnimationFrame(drawGraph);\r\n    };\r\n    \r\n    drawGraph();\r\n    \r\n    // Handle mousemove for hover effects\r\n    const handleMouseMove = (e) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      \r\n      // Check if mouse is over any node\r\n      let foundNode = null;\r\n      for (const node of nodes) {\r\n        const distance = Math.hypot(node.x - x, node.y - y);\r\n        if (distance <= node.radius) {\r\n          foundNode = node;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      setHoveredNode(foundNode);\r\n      document.body.style.cursor = foundNode ? 'pointer' : 'default';\r\n    };\r\n    \r\n    // Handle click to select a node/location\r\n    const handleClick = (e) => {\r\n      if (hoveredNode) {\r\n        setActiveNode(hoveredNode);\r\n        const location = locations.find(loc => loc.id === hoveredNode.id);\r\n        if (location && onNodeClick) {\r\n          onNodeClick(location);\r\n        }\r\n      }\r\n    };\r\n    \r\n    canvas.addEventListener('mousemove', handleMouseMove);\r\n    canvas.addEventListener('click', handleClick);\r\n    \r\n    return () => {\r\n      animationActive = false;\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      window.removeEventListener('resize', updateCanvasSize);\r\n      canvas.removeEventListener('mousemove', handleMouseMove);\r\n      canvas.removeEventListener('click', handleClick);\r\n    };\r\n  }, [isVisible, nodes, edges, hoveredNode, activeNode, locations, onNodeClick]);\r\n\r\n  return (\r\n    <div className={`graph-container ${isVisible ? 'visible' : 'hidden'}`}>\r\n      <canvas \r\n        ref={canvasRef} \r\n        className=\"graph-canvas\"\r\n      />\r\n      \r\n      <div className=\"graph-legend\">\r\n        <div className=\"legend-title\">CuPe-KG Knowledge Graph</div>\r\n        <div className=\"legend-items\">\r\n          <div className=\"legend-item\">\r\n            <span className=\"legend-color\" style={{backgroundColor: colors.historical}}></span>\r\n            <span className=\"legend-label\">Historical Sites</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <span className=\"legend-color\" style={{backgroundColor: colors.cultural}}></span>\r\n            <span className=\"legend-label\">Cultural Sites</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <span className=\"legend-color\" style={{backgroundColor: colors.religious}}></span>\r\n            <span className=\"legend-label\">Religious Sites</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}