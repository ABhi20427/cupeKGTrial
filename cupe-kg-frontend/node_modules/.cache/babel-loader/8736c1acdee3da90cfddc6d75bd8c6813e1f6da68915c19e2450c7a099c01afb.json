{"ast":null,"code":"// src/services/api.js\n\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconsole.log('API_BASE configured as:', API_BASE);\n\n// Location Services\nexport const fetchLocations = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/locations`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Fetched locations:', data.length);\n    return data;\n  } catch (error) {\n    console.error('Error fetching locations:', error);\n    throw error;\n  }\n};\nexport const fetchPlaceData = async locationId => {\n  try {\n    const response = await fetch(`${API_BASE}/place-info?name=${encodeURIComponent(locationId)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Fetched place data for:', locationId, data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching place data:', error);\n    throw error;\n  }\n};\nexport const fetchRoutes = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/routes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Fetched routes:', data.length);\n    return data;\n  } catch (error) {\n    console.error('Error fetching routes:', error);\n    throw error;\n  }\n};\n\n// Search Services\nexport const searchLocations = async query => {\n  try {\n    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Search results for:', query, data.length);\n    return data;\n  } catch (error) {\n    console.error('Error searching locations:', error);\n    throw error;\n  }\n};\n\n// Chatbot Services\nexport const askChatbot = async (question, sessionId, locationId = null) => {\n  try {\n    const response = await fetch(`${API_BASE}/chatbot/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        question,\n        sessionId,\n        locationId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Chatbot response:', data);\n    return data;\n  } catch (error) {\n    console.error('Error asking chatbot:', error);\n    throw error;\n  }\n};\nexport const getChatbotRecommendations = async preferences => {\n  try {\n    const response = await fetch(`${API_BASE}/chatbot/recommend`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(preferences)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Chatbot recommendations:', data);\n    return data;\n  } catch (error) {\n    console.error('Error getting recommendations:', error);\n    throw error;\n  }\n};\n\n// Cultural perspective endpoint (if implemented later)\nexport const fetchPerspective = async (placeName, perspectiveType) => {\n  try {\n    const response = await fetch(`${API_BASE}/perspective?place=${encodeURIComponent(placeName)}&type=${encodeURIComponent(perspectiveType)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching perspective:', error);\n    throw error;\n  }\n};\n\n// Utility function to check API health\nexport const checkAPIHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/health`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Health:', data);\n    return data;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    throw error;\n  }\n};\n\n// Advanced search with filters\nexport const advancedSearch = async filters => {\n  try {\n    const queryParams = new URLSearchParams();\n    if (filters.query) queryParams.append('q', filters.query);\n    if (filters.category) queryParams.append('category', filters.category);\n    if (filters.dynasty) queryParams.append('dynasty', filters.dynasty);\n    if (filters.period) queryParams.append('period', filters.period);\n    const response = await fetch(`${API_BASE}/search/advanced?${queryParams}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in advanced search:', error);\n    throw error;\n  }\n};\n\n// No need to re-export API_BASE as it's already exported through const declaration","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","console","log","fetchLocations","response","fetch","ok","Error","status","data","json","length","error","fetchPlaceData","locationId","encodeURIComponent","fetchRoutes","searchLocations","query","askChatbot","question","sessionId","method","headers","body","JSON","stringify","getChatbotRecommendations","preferences","fetchPerspective","placeName","perspectiveType","checkAPIHealth","advancedSearch","filters","queryParams","URLSearchParams","append","category","dynasty","period"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n\r\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconsole.log('API_BASE configured as:', API_BASE);\r\n\r\n// Location Services\r\nexport const fetchLocations = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/locations`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched locations:', data.length);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching locations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchPlaceData = async (locationId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/place-info?name=${encodeURIComponent(locationId)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched place data for:', locationId, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching place data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/routes`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched routes:', data.length);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching routes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Search Services\r\nexport const searchLocations = async (query) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('Search results for:', query, data.length);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error searching locations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Chatbot Services\r\nexport const askChatbot = async (question, sessionId, locationId = null) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/chatbot/ask`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        question,\r\n        sessionId,\r\n        locationId\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Chatbot response:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error asking chatbot:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getChatbotRecommendations = async (preferences) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/chatbot/recommend`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(preferences)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Chatbot recommendations:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cultural perspective endpoint (if implemented later)\r\nexport const fetchPerspective = async (placeName, perspectiveType) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/perspective?place=${encodeURIComponent(placeName)}&type=${encodeURIComponent(perspectiveType)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching perspective:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Utility function to check API health\r\nexport const checkAPIHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/health`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('API Health:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API health check failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Advanced search with filters\r\nexport const advancedSearch = async (filters) => {\r\n  try {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (filters.query) queryParams.append('q', filters.query);\r\n    if (filters.category) queryParams.append('category', filters.category);\r\n    if (filters.dynasty) queryParams.append('dynasty', filters.dynasty);\r\n    if (filters.period) queryParams.append('period', filters.period);\r\n    \r\n    const response = await fetch(`${API_BASE}/search/advanced?${queryParams}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in advanced search:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// No need to re-export API_BASE as it's already exported through const declaration"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}