{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY projects\\\\CupeKG\\\\cupe-kg-frontend\\\\src\\\\context\\\\MapContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { fetchPlaceData, fetchRoutes, fetchLocations, checkAPIHealth } from '../services/api';\nimport { routes as routesData } from '../data/routes';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the map context\nexport const useMapContext = () => {\n  _s();\n  return useContext(MapContext);\n};\n\n// Provider component\n_s(useMapContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MapProvider = ({\n  children\n}) => {\n  _s2();\n  // State for locations and routes\n  const [locations, setLocations] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedRoute, setSelectedRoute] = useState(null);\n  const [locationData, setLocationData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [apiConnected, setApiConnected] = useState(false);\n\n  // Initial data loading\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // First check if API is healthy\n        console.log('Checking API health...');\n        await checkAPIHealth();\n        setApiConnected(true);\n        console.log('API is healthy, loading data...');\n\n        // For now, use placeholder data\n        const locationsData = [{\n          id: 'hampi',\n          name: 'Hampi',\n          coordinates: {\n            lat: 15.3350,\n            lng: 76.4600\n          },\n          category: 'historical'\n        }, {\n          id: 'delhi',\n          name: 'Delhi',\n          coordinates: {\n            lat: 28.7041,\n            lng: 77.1025\n          },\n          category: 'cultural'\n        }, {\n          id: 'konark',\n          name: 'Konark',\n          coordinates: {\n            lat: 19.8876,\n            lng: 86.0945\n          },\n          category: 'religious'\n        }];\n        setLocations(locationsData);\n        setRoutes(routesData);\n      } catch (err) {\n        setError('Failed to load initial data');\n        console.error('Error loading initial data:', err);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // Function to handle location selection\n  const selectLocation = async location => {\n    setIsLoading(true);\n    setSelectedLocation(location);\n    try {\n      // In a real application, uncomment to fetch from API\n      // const data = await fetchPlaceData(location.id);\n\n      // For now, use placeholder data with a simulated delay\n      setTimeout(() => {\n        setLocationData(placeholderData[location.id]);\n        setIsLoading(false);\n      }, 500);\n    } catch (err) {\n      setError('Failed to load location data');\n      console.error('Error fetching location data:', err);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to select a route\n  const selectRoute = routeId => {\n    const route = routes.find(r => r.id === routeId);\n    setSelectedRoute(route);\n  };\n\n  // Function to clear selections\n  const clearSelections = () => {\n    setSelectedLocation(null);\n    setSelectedRoute(null);\n    setLocationData(null);\n  };\n\n  // Function to pan map to a location\n  const panToLocation = location => {\n    if (mapInstance && location) {\n      mapInstance.flyTo([location.coordinates.lat, location.coordinates.lng], 10, {\n        animate: true,\n        duration: 1.5\n      });\n    }\n  };\n\n  // Function to reset map view\n  const resetMapView = () => {\n    if (mapInstance) {\n      const INDIA_CENTER = [20.5937, 78.9629];\n      const DEFAULT_ZOOM = 5;\n      mapInstance.flyTo(INDIA_CENTER, DEFAULT_ZOOM, {\n        animate: true,\n        duration: 1.5\n      });\n      clearSelections();\n    }\n  };\n\n  // Create the value object\n  const contextValue = {\n    locations,\n    routes,\n    selectedLocation,\n    selectedRoute,\n    locationData,\n    isLoading,\n    error,\n    mapInstance,\n    setMapInstance,\n    selectLocation,\n    selectRoute,\n    clearSelections,\n    panToLocation,\n    resetMapView\n  };\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapProvider, \"faWCuFlwC5Vt66xmcVTAVnH2A7o=\");\n_c = MapProvider;\nexport default MapContext;\nvar _c;\n$RefreshReg$(_c, \"MapProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","fetchPlaceData","fetchRoutes","fetchLocations","checkAPIHealth","routes","routesData","jsxDEV","_jsxDEV","MapContext","useMapContext","_s","MapProvider","children","_s2","locations","setLocations","setRoutes","selectedLocation","setSelectedLocation","selectedRoute","setSelectedRoute","locationData","setLocationData","isLoading","setIsLoading","error","setError","mapInstance","setMapInstance","apiConnected","setApiConnected","loadInitialData","console","log","locationsData","id","name","coordinates","lat","lng","category","err","selectLocation","location","setTimeout","placeholderData","selectRoute","routeId","route","find","r","clearSelections","panToLocation","flyTo","animate","duration","resetMapView","INDIA_CENTER","DEFAULT_ZOOM","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/context/MapContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { fetchPlaceData, fetchRoutes, fetchLocations, checkAPIHealth } from '../services/api';\r\nimport { routes as routesData } from '../data/routes';\r\n\r\n// Create the context\r\nconst MapContext = createContext();\r\n\r\n// Custom hook to use the map context\r\nexport const useMapContext = () => useContext(MapContext);\r\n\r\n// Provider component\r\nexport const MapProvider = ({ children }) => {\r\n  // State for locations and routes\r\n  const [locations, setLocations] = useState([]);\r\n  const [routes, setRoutes] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [selectedRoute, setSelectedRoute] = useState(null);\r\n  const [locationData, setLocationData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [mapInstance, setMapInstance] = useState(null);\r\n  const [apiConnected, setApiConnected] = useState(false);\r\n\r\n  // Initial data loading\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // First check if API is healthy\r\n        console.log('Checking API health...');\r\n        await checkAPIHealth();\r\n        setApiConnected(true);\r\n        console.log('API is healthy, loading data...');\r\n        \r\n        // For now, use placeholder data\r\n        const locationsData = [\r\n          { \r\n            id: 'hampi', \r\n            name: 'Hampi', \r\n            coordinates: { lat: 15.3350, lng: 76.4600 },\r\n            category: 'historical' \r\n          },\r\n          { \r\n            id: 'delhi', \r\n            name: 'Delhi', \r\n            coordinates: { lat: 28.7041, lng: 77.1025 },\r\n            category: 'cultural'  \r\n          },\r\n          { \r\n            id: 'konark', \r\n            name: 'Konark', \r\n            coordinates: { lat: 19.8876, lng: 86.0945 },\r\n            category: 'religious'  \r\n          }\r\n        ];\r\n        \r\n        setLocations(locationsData);\r\n        setRoutes(routesData);\r\n      } catch (err) {\r\n        setError('Failed to load initial data');\r\n        console.error('Error loading initial data:', err);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Function to handle location selection\r\n  const selectLocation = async (location) => {\r\n    setIsLoading(true);\r\n    setSelectedLocation(location);\r\n    \r\n    try {\r\n      // In a real application, uncomment to fetch from API\r\n      // const data = await fetchPlaceData(location.id);\r\n      \r\n      // For now, use placeholder data with a simulated delay\r\n      setTimeout(() => {\r\n        setLocationData(placeholderData[location.id]);\r\n        setIsLoading(false);\r\n      }, 500);\r\n    } catch (err) {\r\n      setError('Failed to load location data');\r\n      console.error('Error fetching location data:', err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to select a route\r\n  const selectRoute = (routeId) => {\r\n    const route = routes.find(r => r.id === routeId);\r\n    setSelectedRoute(route);\r\n  };\r\n\r\n  // Function to clear selections\r\n  const clearSelections = () => {\r\n    setSelectedLocation(null);\r\n    setSelectedRoute(null);\r\n    setLocationData(null);\r\n  };\r\n\r\n  // Function to pan map to a location\r\n  const panToLocation = (location) => {\r\n    if (mapInstance && location) {\r\n      mapInstance.flyTo(\r\n        [location.coordinates.lat, location.coordinates.lng],\r\n        10,\r\n        {\r\n          animate: true,\r\n          duration: 1.5\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  // Function to reset map view\r\n  const resetMapView = () => {\r\n    if (mapInstance) {\r\n      const INDIA_CENTER = [20.5937, 78.9629];\r\n      const DEFAULT_ZOOM = 5;\r\n      \r\n      mapInstance.flyTo(\r\n        INDIA_CENTER,\r\n        DEFAULT_ZOOM,\r\n        {\r\n          animate: true,\r\n          duration: 1.5\r\n        }\r\n      );\r\n      \r\n      clearSelections();\r\n    }\r\n  };\r\n\r\n  // Create the value object\r\n  const contextValue = {\r\n    locations,\r\n    routes,\r\n    selectedLocation,\r\n    selectedRoute,\r\n    locationData,\r\n    isLoading,\r\n    error,\r\n    mapInstance,\r\n    setMapInstance,\r\n    selectLocation,\r\n    selectRoute,\r\n    clearSelections,\r\n    panToLocation,\r\n    resetMapView\r\n  };\r\n\r\n  return (\r\n    <MapContext.Provider value={contextValue}>\r\n      {children}\r\n    </MapContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MapContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}