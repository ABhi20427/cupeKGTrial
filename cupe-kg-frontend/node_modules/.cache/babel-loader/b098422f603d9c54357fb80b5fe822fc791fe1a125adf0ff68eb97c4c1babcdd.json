{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY projects\\\\CupeKG\\\\cupe-kg-frontend\\\\src\\\\context\\\\MapContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/MapContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { fetchPlaceData, fetchRoutes, fetchLocations, checkAPIHealth } from '../services/api';\nimport { routes as routesData } from '../data/routes';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the map context\nexport const useMapContext = () => {\n  _s();\n  return useContext(MapContext);\n};\n\n// Provider component\n_s(useMapContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MapProvider = ({\n  children\n}) => {\n  _s2();\n  // State for locations and routes\n  const [locations, setLocations] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedRoute, setSelectedRoute] = useState(null);\n  const [locationData, setLocationData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [apiConnected, setApiConnected] = useState(false);\n\n  // Initial data loading\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // First check if API is healthy\n        console.log('Checking API health...');\n        await checkAPIHealth();\n        setApiConnected(true);\n        console.log('API is healthy, loading data...');\n\n        // Load locations from backend\n        const locationsData = await fetchLocations();\n        console.log('Received locations from backend:', locationsData);\n\n        // Transform backend data to frontend format\n        const transformedLocations = locationsData.map(location => ({\n          id: location.id,\n          name: location.name,\n          coordinates: location.coordinates,\n          category: location.category,\n          description: location.description,\n          dynasty: location.dynasty,\n          period: location.period,\n          tags: location.tags || []\n        }));\n        setLocations(transformedLocations);\n        console.log('Transformed locations:', transformedLocations);\n\n        // Try to load routes from backend, fallback to local data\n        try {\n          const routesData = await fetchRoutes();\n          setRoutes(routesData);\n          console.log('Loaded routes from backend:', routesData);\n        } catch (routeError) {\n          console.warn('Could not load routes from backend, using fallback data:', routeError);\n          setRoutes(routesData); // Use local fallback data\n        }\n      } catch (err) {\n        console.error('Error loading data from backend:', err);\n        setError('Failed to connect to backend. Using fallback data.');\n        setApiConnected(false);\n\n        // Fallback to original placeholder data\n        const fallbackLocations = [{\n          id: 'hampi',\n          name: 'Hampi',\n          coordinates: {\n            lat: 15.3350,\n            lng: 76.4600\n          },\n          category: 'historical',\n          description: 'Ancient capital of the Vijayanagara Empire'\n        }, {\n          id: 'delhi',\n          name: 'Delhi',\n          coordinates: {\n            lat: 28.7041,\n            lng: 77.1025\n          },\n          category: 'cultural',\n          description: 'Historic capital with layers of civilization'\n        }, {\n          id: 'konark',\n          name: 'Konark',\n          coordinates: {\n            lat: 19.8876,\n            lng: 86.0945\n          },\n          category: 'religious',\n          description: '13th-century Sun Temple designed as a chariot'\n        }];\n        setLocations(fallbackLocations);\n        setRoutes(routesData);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // Function to handle location selection\n  const selectLocation = async location => {\n    setIsLoading(true);\n    setSelectedLocation(location);\n    setError(null);\n    try {\n      if (apiConnected) {\n        console.log('Fetching detailed data for location:', location.id);\n        const data = await fetchPlaceData(location.id);\n        console.log('Received detailed location data:', data);\n        setLocationData(data);\n      } else {\n        // Fallback to basic location data\n        console.log('API not connected, using basic location data');\n        setLocationData({\n          id: location.id,\n          name: location.name,\n          description: location.description,\n          history: 'Detailed history will be available when connected to the backend.',\n          culturalFacts: ['Rich cultural heritage site'],\n          legends: [],\n          tags: location.tags || []\n        });\n      }\n    } catch (err) {\n      console.error('Error fetching location data:', err);\n      setError('Failed to load detailed location information');\n\n      // Set basic fallback data\n      setLocationData({\n        id: location.id,\n        name: location.name,\n        description: location.description,\n        history: 'Unable to load detailed information at this time.',\n        culturalFacts: [],\n        legends: [],\n        tags: []\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to handle route selection\n  const selectRoute = route => {\n    setSelectedRoute(route);\n    setSelectedLocation(null); // Clear location selection when route is selected\n    setLocationData(null);\n  };\n\n  // Function to clear all selections\n  const clearSelections = () => {\n    setSelectedLocation(null);\n    setSelectedRoute(null);\n    setLocationData(null);\n  };\n\n  // Function to reset map view to India\n  const resetMapView = () => {\n    if (mapInstance) {\n      mapInstance.setView([20.5937, 78.9629], 5); // India center coordinates\n    }\n    clearSelections();\n  };\n\n  // Function to search locations\n  const searchLocations = query => {\n    if (!query.trim()) return locations;\n    const searchTerm = query.toLowerCase();\n    return locations.filter(location => location.name.toLowerCase().includes(searchTerm) || location.description.toLowerCase().includes(searchTerm) || location.category.toLowerCase().includes(searchTerm) || location.dynasty && location.dynasty.toLowerCase().includes(searchTerm) || location.tags && location.tags.some(tag => tag.toLowerCase().includes(searchTerm)));\n  };\n\n  // Function to filter locations by category\n  const filterLocationsByCategory = category => {\n    if (!category) return locations;\n    return locations.filter(location => location.category === category);\n  };\n\n  // Function to get available categories\n  const getCategories = () => {\n    const categories = [...new Set(locations.map(loc => loc.category))];\n    return categories.sort();\n  };\n\n  // Function to get available dynasties\n  const getDynasties = () => {\n    const dynasties = [...new Set(locations.map(loc => loc.dynasty).filter(Boolean))];\n    return dynasties.sort();\n  };\n\n  // Function to refresh data from backend\n  const refreshData = async () => {\n    setIsLoading(true);\n    try {\n      await checkAPIHealth();\n      const locationsData = await fetchLocations();\n      const transformedLocations = locationsData.map(location => ({\n        id: location.id,\n        name: location.name,\n        coordinates: location.coordinates,\n        category: location.category,\n        description: location.description,\n        dynasty: location.dynasty,\n        period: location.period,\n        tags: location.tags || []\n      }));\n      setLocations(transformedLocations);\n      setApiConnected(true);\n      setError(null);\n      console.log('Data refreshed successfully');\n    } catch (err) {\n      console.error('Error refreshing data:', err);\n      setError('Failed to refresh data from backend');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const value = {\n    // State\n    locations,\n    routes,\n    selectedLocation,\n    selectedRoute,\n    locationData,\n    isLoading,\n    error,\n    mapInstance,\n    apiConnected,\n    // Setters\n    setMapInstance,\n    // Actions\n    selectLocation,\n    selectRoute,\n    clearSelections,\n    resetMapView,\n    searchLocations,\n    filterLocationsByCategory,\n    getCategories,\n    getDynasties,\n    refreshData\n  };\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapProvider, \"faWCuFlwC5Vt66xmcVTAVnH2A7o=\");\n_c = MapProvider;\nexport default MapContext;\nvar _c;\n$RefreshReg$(_c, \"MapProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","fetchPlaceData","fetchRoutes","fetchLocations","checkAPIHealth","routes","routesData","jsxDEV","_jsxDEV","MapContext","useMapContext","_s","MapProvider","children","_s2","locations","setLocations","setRoutes","selectedLocation","setSelectedLocation","selectedRoute","setSelectedRoute","locationData","setLocationData","isLoading","setIsLoading","error","setError","mapInstance","setMapInstance","apiConnected","setApiConnected","loadInitialData","console","log","locationsData","transformedLocations","map","location","id","name","coordinates","category","description","dynasty","period","tags","routeError","warn","err","fallbackLocations","lat","lng","selectLocation","data","history","culturalFacts","legends","selectRoute","route","clearSelections","resetMapView","setView","searchLocations","query","trim","searchTerm","toLowerCase","filter","includes","some","tag","filterLocationsByCategory","getCategories","categories","Set","loc","sort","getDynasties","dynasties","Boolean","refreshData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/context/MapContext.js"],"sourcesContent":["// src/context/MapContext.js\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { fetchPlaceData, fetchRoutes, fetchLocations, checkAPIHealth } from '../services/api';\r\nimport { routes as routesData } from '../data/routes';\r\n\r\n// Create the context\r\nconst MapContext = createContext();\r\n\r\n// Custom hook to use the map context\r\nexport const useMapContext = () => useContext(MapContext);\r\n\r\n// Provider component\r\nexport const MapProvider = ({ children }) => {\r\n  // State for locations and routes\r\n  const [locations, setLocations] = useState([]);\r\n  const [routes, setRoutes] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [selectedRoute, setSelectedRoute] = useState(null);\r\n  const [locationData, setLocationData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [mapInstance, setMapInstance] = useState(null);\r\n  const [apiConnected, setApiConnected] = useState(false);\r\n\r\n  // Initial data loading\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // First check if API is healthy\r\n        console.log('Checking API health...');\r\n        await checkAPIHealth();\r\n        setApiConnected(true);\r\n        console.log('API is healthy, loading data...');\r\n        \r\n        // Load locations from backend\r\n        const locationsData = await fetchLocations();\r\n        console.log('Received locations from backend:', locationsData);\r\n        \r\n        // Transform backend data to frontend format\r\n        const transformedLocations = locationsData.map(location => ({\r\n          id: location.id,\r\n          name: location.name,\r\n          coordinates: location.coordinates,\r\n          category: location.category,\r\n          description: location.description,\r\n          dynasty: location.dynasty,\r\n          period: location.period,\r\n          tags: location.tags || []\r\n        }));\r\n        \r\n        setLocations(transformedLocations);\r\n        console.log('Transformed locations:', transformedLocations);\r\n        \r\n        // Try to load routes from backend, fallback to local data\r\n        try {\r\n          const routesData = await fetchRoutes();\r\n          setRoutes(routesData);\r\n          console.log('Loaded routes from backend:', routesData);\r\n        } catch (routeError) {\r\n          console.warn('Could not load routes from backend, using fallback data:', routeError);\r\n          setRoutes(routesData); // Use local fallback data\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Error loading data from backend:', err);\r\n        setError('Failed to connect to backend. Using fallback data.');\r\n        setApiConnected(false);\r\n        \r\n        // Fallback to original placeholder data\r\n        const fallbackLocations = [\r\n          { \r\n            id: 'hampi', \r\n            name: 'Hampi', \r\n            coordinates: { lat: 15.3350, lng: 76.4600 },\r\n            category: 'historical',\r\n            description: 'Ancient capital of the Vijayanagara Empire'\r\n          },\r\n          { \r\n            id: 'delhi', \r\n            name: 'Delhi', \r\n            coordinates: { lat: 28.7041, lng: 77.1025 },\r\n            category: 'cultural',\r\n            description: 'Historic capital with layers of civilization'\r\n          },\r\n          { \r\n            id: 'konark', \r\n            name: 'Konark', \r\n            coordinates: { lat: 19.8876, lng: 86.0945 },\r\n            category: 'religious',\r\n            description: '13th-century Sun Temple designed as a chariot'\r\n          }\r\n        ];\r\n        \r\n        setLocations(fallbackLocations);\r\n        setRoutes(routesData);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Function to handle location selection\r\n  const selectLocation = async (location) => {\r\n    setIsLoading(true);\r\n    setSelectedLocation(location);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (apiConnected) {\r\n        console.log('Fetching detailed data for location:', location.id);\r\n        const data = await fetchPlaceData(location.id);\r\n        console.log('Received detailed location data:', data);\r\n        setLocationData(data);\r\n      } else {\r\n        // Fallback to basic location data\r\n        console.log('API not connected, using basic location data');\r\n        setLocationData({\r\n          id: location.id,\r\n          name: location.name,\r\n          description: location.description,\r\n          history: 'Detailed history will be available when connected to the backend.',\r\n          culturalFacts: ['Rich cultural heritage site'],\r\n          legends: [],\r\n          tags: location.tags || []\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching location data:', err);\r\n      setError('Failed to load detailed location information');\r\n      \r\n      // Set basic fallback data\r\n      setLocationData({\r\n        id: location.id,\r\n        name: location.name,\r\n        description: location.description,\r\n        history: 'Unable to load detailed information at this time.',\r\n        culturalFacts: [],\r\n        legends: [],\r\n        tags: []\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle route selection\r\n  const selectRoute = (route) => {\r\n    setSelectedRoute(route);\r\n    setSelectedLocation(null); // Clear location selection when route is selected\r\n    setLocationData(null);\r\n  };\r\n\r\n  // Function to clear all selections\r\n  const clearSelections = () => {\r\n    setSelectedLocation(null);\r\n    setSelectedRoute(null);\r\n    setLocationData(null);\r\n  };\r\n\r\n  // Function to reset map view to India\r\n  const resetMapView = () => {\r\n    if (mapInstance) {\r\n      mapInstance.setView([20.5937, 78.9629], 5); // India center coordinates\r\n    }\r\n    clearSelections();\r\n  };\r\n\r\n  // Function to search locations\r\n  const searchLocations = (query) => {\r\n    if (!query.trim()) return locations;\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    return locations.filter(location => \r\n      location.name.toLowerCase().includes(searchTerm) ||\r\n      location.description.toLowerCase().includes(searchTerm) ||\r\n      location.category.toLowerCase().includes(searchTerm) ||\r\n      (location.dynasty && location.dynasty.toLowerCase().includes(searchTerm)) ||\r\n      (location.tags && location.tags.some(tag => tag.toLowerCase().includes(searchTerm)))\r\n    );\r\n  };\r\n\r\n  // Function to filter locations by category\r\n  const filterLocationsByCategory = (category) => {\r\n    if (!category) return locations;\r\n    return locations.filter(location => location.category === category);\r\n  };\r\n\r\n  // Function to get available categories\r\n  const getCategories = () => {\r\n    const categories = [...new Set(locations.map(loc => loc.category))];\r\n    return categories.sort();\r\n  };\r\n\r\n  // Function to get available dynasties\r\n  const getDynasties = () => {\r\n    const dynasties = [...new Set(locations.map(loc => loc.dynasty).filter(Boolean))];\r\n    return dynasties.sort();\r\n  };\r\n\r\n  // Function to refresh data from backend\r\n  const refreshData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      await checkAPIHealth();\r\n      const locationsData = await fetchLocations();\r\n      const transformedLocations = locationsData.map(location => ({\r\n        id: location.id,\r\n        name: location.name,\r\n        coordinates: location.coordinates,\r\n        category: location.category,\r\n        description: location.description,\r\n        dynasty: location.dynasty,\r\n        period: location.period,\r\n        tags: location.tags || []\r\n      }));\r\n      setLocations(transformedLocations);\r\n      setApiConnected(true);\r\n      setError(null);\r\n      console.log('Data refreshed successfully');\r\n    } catch (err) {\r\n      console.error('Error refreshing data:', err);\r\n      setError('Failed to refresh data from backend');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    // State\r\n    locations,\r\n    routes,\r\n    selectedLocation,\r\n    selectedRoute,\r\n    locationData,\r\n    isLoading,\r\n    error,\r\n    mapInstance,\r\n    apiConnected,\r\n    \r\n    // Setters\r\n    setMapInstance,\r\n    \r\n    // Actions\r\n    selectLocation,\r\n    selectRoute,\r\n    clearSelections,\r\n    resetMapView,\r\n    searchLocations,\r\n    filterLocationsByCategory,\r\n    getCategories,\r\n    getDynasties,\r\n    refreshData\r\n  };\r\n\r\n  return (\r\n    <MapContext.Provider value={value}>\r\n      {children}\r\n    </MapContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MapContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}