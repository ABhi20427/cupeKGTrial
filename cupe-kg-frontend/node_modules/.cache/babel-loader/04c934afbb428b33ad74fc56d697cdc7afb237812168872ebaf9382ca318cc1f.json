{"ast":null,"code":"// cupe-kg-frontend/src/utils/enhancedRoutePlanner.js\n// FIXED VERSION - Replace your entire enhancedRoutePlanner.js with this\n\nexport class UltraAccurateRoutePlanner {\n  constructor(locations, routes) {\n    this.locations = locations || [];\n    this.routes = routes || [];\n\n    // Real distance matrix (in km) between major Indian cities\n    this.realDistanceMatrix = {\n      'delhi': {\n        'jaipur': 280,\n        'agra': 233,\n        'varanasi': 821,\n        'amritsar': 460,\n        'hampi': 1483,\n        'udaipur': 421,\n        'khajuraho': 620,\n        'bodh-gaya': 1105\n      },\n      'jaipur': {\n        'delhi': 280,\n        'udaipur': 393,\n        'taj-mahal': 240,\n        'ajanta': 739\n      },\n      'taj-mahal': {\n        'delhi': 233,\n        'jaipur': 240,\n        'khajuraho': 295,\n        'varanasi': 605\n      },\n      'varanasi': {\n        'delhi': 821,\n        'bodh-gaya': 250,\n        'khajuraho': 298,\n        'kolkata': 679,\n        'agra': 605\n      },\n      'bodh-gaya': {\n        'varanasi': 250,\n        'delhi': 1105,\n        'kolkata': 495,\n        'patna': 135\n      },\n      'hampi': {\n        'delhi': 1483,\n        'madurai': 440\n      },\n      'madurai': {\n        'hampi': 440,\n        'chennai': 462,\n        'bangalore': 460,\n        'kochi': 257\n      },\n      'amritsar': {\n        'delhi': 460,\n        'chandigarh': 230,\n        'shimla': 350\n      },\n      'udaipur': {\n        'jaipur': 393,\n        'delhi': 421,\n        'mumbai': 734,\n        'ajanta': 451\n      },\n      'konark': {\n        'bhubaneswar': 65,\n        'kolkata': 380,\n        'delhi': 1108\n      },\n      'ajanta': {\n        'ellora': 95,\n        'mumbai': 440,\n        'pune': 240,\n        'udaipur': 451\n      },\n      'ellora': {\n        'ajanta': 95,\n        'mumbai': 380,\n        'pune': 220\n      }\n    };\n\n    // Transportation costs (INR per km)\n    this.transportationCosts = {\n      'flight': 3.5,\n      'train': 0.75,\n      'bus': 0.45,\n      'car': 12\n    };\n\n    // Accommodation costs by city (per night)\n    this.accommodationCosts = {\n      'delhi': {\n        low: 1200,\n        medium: 3500,\n        high: 8500\n      },\n      'jaipur': {\n        low: 800,\n        medium: 2500,\n        high: 6500\n      },\n      'taj-mahal': {\n        low: 900,\n        medium: 2800,\n        high: 7000\n      },\n      'varanasi': {\n        low: 600,\n        medium: 1800,\n        high: 4500\n      },\n      'amritsar': {\n        low: 700,\n        medium: 2000,\n        high: 5000\n      },\n      'udaipur': {\n        low: 1000,\n        medium: 3200,\n        high: 8000\n      },\n      'hampi': {\n        low: 500,\n        medium: 1500,\n        high: 3500\n      },\n      'madurai': {\n        low: 600,\n        medium: 1800,\n        high: 4000\n      },\n      'bodh-gaya': {\n        low: 400,\n        medium: 1200,\n        high: 2800\n      },\n      'konark': {\n        low: 600,\n        medium: 1600,\n        high: 3500\n      },\n      'mahabalipuram': {\n        low: 800,\n        medium: 2200,\n        high: 5500\n      },\n      'ajanta': {\n        low: 600,\n        medium: 1600,\n        high: 3800\n      },\n      'ellora': {\n        low: 600,\n        medium: 1600,\n        high: 3800\n      },\n      'khajuraho': {\n        low: 700,\n        medium: 2000,\n        high: 4500\n      }\n    };\n\n    // Weather and seasonal data\n    this.seasonalData = {\n      'winter': {\n        months: ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar'],\n        bestRegions: ['north', 'central', 'west', 'south'],\n        temperature: {\n          min: 10,\n          max: 25\n        },\n        rainfall: 'minimal'\n      },\n      'summer': {\n        months: ['Apr', 'May', 'Jun'],\n        bestRegions: ['hills', 'north-east'],\n        avoidRegions: ['rajasthan', 'central'],\n        temperature: {\n          min: 25,\n          max: 45\n        },\n        rainfall: 'none'\n      },\n      'monsoon': {\n        months: ['Jul', 'Aug', 'Sep'],\n        bestRegions: ['western-ghats', 'caves'],\n        temperature: {\n          min: 20,\n          max: 30\n        },\n        rainfall: 'heavy'\n      }\n    };\n  }\n\n  // Main route creation function\n  createUltraAccurateRoute(preferences) {\n    console.log('Creating ultra-accurate route with preferences:', preferences);\n    const {\n      interests = [],\n      max_travel_days = 7,\n      budget_category = 'medium',\n      preferred_season = 'winter',\n      start_location = 'delhi',\n      transport_modes = ['mixed']\n    } = preferences;\n\n    // Step 1: Filter locations by interests\n    const candidateLocations = this.filterLocationsByInterests(interests);\n\n    // Step 2: Create optimized path\n    const optimizedPath = this.optimizePath(candidateLocations, start_location, max_travel_days);\n\n    // Step 3: Generate detailed itinerary\n    const detailedItinerary = this.createDetailedItinerary(optimizedPath, transport_modes[0], budget_category);\n    return detailedItinerary;\n  }\n\n  // Filter locations based on interests\n  filterLocationsByInterests(interests) {\n    if (!interests || interests.length === 0) {\n      return this.locations.slice(0, 8); // Return first 8 locations as default\n    }\n    return this.locations.filter(location => {\n      const locationTags = location.tags || [];\n      const locationCategory = location.category || '';\n      return interests.some(interest => {\n        switch (interest.toLowerCase()) {\n          case 'religious':\n          case 'spiritual':\n            return locationCategory === 'religious' || locationTags.some(tag => ['temple', 'buddhist', 'hindu', 'sikh', 'religious'].includes(tag.toLowerCase()));\n          case 'historical':\n          case 'heritage':\n            return locationCategory === 'historical' || locationTags.some(tag => ['unesco', 'heritage', 'historical'].includes(tag.toLowerCase()));\n          case 'architectural':\n          case 'architecture':\n            return locationTags.some(tag => ['architecture', 'palace', 'fort', 'mughal'].includes(tag.toLowerCase()));\n          case 'cultural':\n            return locationCategory === 'cultural';\n          default:\n            return locationTags.some(tag => tag.toLowerCase().includes(interest.toLowerCase())) || locationCategory.toLowerCase().includes(interest.toLowerCase());\n        }\n      });\n    });\n  }\n\n  // Optimize path between locations\n  optimizePath(locations, startLocationId, maxDays) {\n    if (locations.length === 0) return [];\n\n    // Find start location\n    const startLoc = locations.find(loc => loc.id === startLocationId) || locations[0];\n\n    // Calculate maximum locations (2 days per location average)\n    const maxLocations = Math.min(Math.floor(maxDays / 2), locations.length, 5);\n    if (maxLocations <= 1) return [startLoc];\n\n    // Simple greedy algorithm for path optimization\n    let optimizedPath = [startLoc];\n    let remainingLocations = locations.filter(loc => loc.id !== startLoc.id);\n    while (optimizedPath.length < maxLocations && remainingLocations.length > 0) {\n      const currentLoc = optimizedPath[optimizedPath.length - 1];\n\n      // Find nearest location\n      let nearestLoc = null;\n      let shortestDistance = Infinity;\n      remainingLocations.forEach(loc => {\n        const distance = this.getDistance(currentLoc.id, loc.id);\n        if (distance < shortestDistance) {\n          shortestDistance = distance;\n          nearestLoc = loc;\n        }\n      });\n      if (nearestLoc) {\n        optimizedPath.push(nearestLoc);\n        remainingLocations = remainingLocations.filter(loc => loc.id !== nearestLoc.id);\n      } else {\n        break;\n      }\n    }\n    return optimizedPath;\n  }\n\n  // Get distance between two locations\n  getDistance(loc1Id, loc2Id) {\n    // Check real distance matrix first\n    if (this.realDistanceMatrix[loc1Id] && this.realDistanceMatrix[loc1Id][loc2Id]) {\n      return this.realDistanceMatrix[loc1Id][loc2Id];\n    }\n    if (this.realDistanceMatrix[loc2Id] && this.realDistanceMatrix[loc2Id][loc1Id]) {\n      return this.realDistanceMatrix[loc2Id][loc1Id];\n    }\n\n    // Fallback to coordinate calculation\n    const loc1 = this.locations.find(l => l.id === loc1Id);\n    const loc2 = this.locations.find(l => l.id === loc2Id);\n    if (!loc1 || !loc2) return 1000; // High penalty for unknown locations\n\n    return this.calculateHaversineDistance(loc1.coordinates, loc2.coordinates);\n  }\n\n  // Calculate Haversine distance\n  calculateHaversineDistance(coord1, coord2) {\n    const R = 6371; // Earth's radius in km\n    const lat1 = coord1.lat || coord1[0];\n    const lng1 = coord1.lng || coord1[1];\n    const lat2 = coord2.lat || coord2[0];\n    const lng2 = coord2.lng || coord2[1];\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return Math.round(R * c);\n  }\n\n  // Check if locations are in different regions\n  isDifferentRegion(loc1, loc2) {\n    const regions = {\n      'north': ['delhi', 'agra', 'jaipur', 'amritsar'],\n      'west': ['udaipur', 'ajanta', 'ellora'],\n      'central': ['khajuraho', 'bodh-gaya', 'varanasi'],\n      'south': ['hampi', 'madurai', 'mahabalipuram'],\n      'east': ['konark']\n    };\n    let loc1Region = null,\n      loc2Region = null;\n    Object.entries(regions).forEach(([region, cities]) => {\n      if (cities.includes(loc1.id)) loc1Region = region;\n      if (cities.includes(loc2.id)) loc2Region = region;\n    });\n    return loc1Region !== loc2Region;\n  }\n\n  // Create detailed itinerary\n  createDetailedItinerary(path, transportMode, budget) {\n    const itinerary = [];\n    let currentDay = 1;\n    let totalCost = 0;\n    for (let i = 0; i < path.length; i++) {\n      const location = path[i];\n      const nextLocation = path[i + 1];\n\n      // Location exploration days\n      const daysAtLocation = this.getOptimalDaysAtLocation(location);\n      const dailyCost = this.getAccommodationCost(location.id, budget) + this.getFoodCost(budget) + this.getLocalTransportCost();\n      for (let day = 0; day < daysAtLocation; day++) {\n        const dayActivity = this.generateDayActivity(location, day, budget);\n        itinerary.push({\n          day: currentDay + day,\n          location: location.name,\n          type: 'exploration',\n          description: dayActivity.description,\n          highlights: dayActivity.highlights,\n          costs: {\n            accommodation: this.getAccommodationCost(location.id, budget),\n            food: this.getFoodCost(budget),\n            localTransport: this.getLocalTransportCost(),\n            attractions: dayActivity.attractionCosts,\n            total: dailyCost + dayActivity.attractionCosts\n          },\n          culturalInsights: this.getCulturalInsights(location),\n          practicalTips: this.getPracticalTips(location)\n        });\n        totalCost += dailyCost + dayActivity.attractionCosts;\n      }\n      currentDay += daysAtLocation;\n\n      // Travel day\n      if (nextLocation) {\n        const travelDetails = this.getAccurateTravelDetails(location, nextLocation, transportMode);\n        itinerary.push({\n          day: currentDay,\n          location: `${location.name} to ${nextLocation.name}`,\n          type: 'travel',\n          description: `Travel from ${location.name} to ${nextLocation.name} via ${travelDetails.mode}`,\n          travelDetails: travelDetails,\n          costs: {\n            transport: travelDetails.cost,\n            food: travelDetails.mealCost || 0,\n            total: travelDetails.cost + (travelDetails.mealCost || 0)\n          }\n        });\n        totalCost += travelDetails.cost + (travelDetails.mealCost || 0);\n        currentDay++;\n      }\n    }\n    return {\n      id: `ultra-accurate-${Date.now()}`,\n      name: 'Your Culturally Intelligent Route',\n      description: `Scientifically optimized ${path.length}-destination route with cultural depth`,\n      color: '#2196F3',\n      path: path.map(loc => [loc.coordinates.lat, loc.coordinates.lng]),\n      locations: path.map(loc => ({\n        name: loc.name,\n        coordinates: [loc.coordinates.lat, loc.coordinates.lng],\n        description: loc.description\n      })),\n      detailedItinerary: itinerary,\n      totalCost: Math.round(totalCost),\n      totalDays: currentDay - 1,\n      culturalThemes: this.extractCulturalThemes(path),\n      optimizationMetrics: {\n        totalDistance: this.calculateTotalDistance(path),\n        culturalDiversity: this.calculateCulturalDiversity(path),\n        costEfficiency: this.calculateCostEfficiency(totalCost, path.length)\n      }\n    };\n  }\n\n  // Helper methods for accurate cost calculation\n  getAccommodationCost(locationId, budget) {\n    const costs = this.accommodationCosts[locationId] || {\n      low: 800,\n      medium: 2500,\n      high: 6000\n    };\n    return costs[budget] || costs.medium;\n  }\n  getFoodCost(budget) {\n    const foodCosts = {\n      low: 800,\n      medium: 1500,\n      high: 3000\n    };\n    return foodCosts[budget] || foodCosts.medium;\n  }\n  getLocalTransportCost() {\n    return 500; // Average local transport per day\n  }\n\n  // Generate detailed day activities\n  generateDayActivity(location, dayNumber, budget) {\n    const attractions = this.getLocationAttractions(location.id);\n    const selectedAttractions = attractions.slice(dayNumber * 2, (dayNumber + 1) * 2);\n    return {\n      description: `Day ${dayNumber + 1} in ${location.name}: ${selectedAttractions.map(a => a.name).join(', ')}`,\n      highlights: selectedAttractions,\n      attractionCosts: selectedAttractions.reduce((sum, attr) => sum + (attr.entryCost || 0), 0)\n    };\n  }\n\n  // Get location-specific attractions with costs\n  getLocationAttractions(locationId) {\n    const attractions = {\n      'delhi': [{\n        name: 'Red Fort',\n        entryCost: 35,\n        time: '3 hours'\n      }, {\n        name: 'India Gate',\n        entryCost: 0,\n        time: '1 hour'\n      }, {\n        name: 'Qutub Minar',\n        entryCost: 30,\n        time: '2 hours'\n      }, {\n        name: 'Humayun\\'s Tomb',\n        entryCost: 30,\n        time: '2 hours'\n      }],\n      'jaipur': [{\n        name: 'Hawa Mahal',\n        entryCost: 50,\n        time: '1 hour'\n      }, {\n        name: 'City Palace',\n        entryCost: 300,\n        time: '3 hours'\n      }, {\n        name: 'Amber Fort',\n        entryCost: 200,\n        time: '4 hours'\n      }, {\n        name: 'Jantar Mantar',\n        entryCost: 40,\n        time: '1 hour'\n      }],\n      'taj-mahal': [{\n        name: 'Taj Mahal',\n        entryCost: 1100,\n        time: '4 hours'\n      }, {\n        name: 'Agra Fort',\n        entryCost: 650,\n        time: '3 hours'\n      }, {\n        name: 'Mehtab Bagh',\n        entryCost: 300,\n        time: '2 hours'\n      }]\n      // Add more locations...\n    };\n    return attractions[locationId] || [{\n      name: 'Main attraction',\n      entryCost: 100,\n      time: '3 hours'\n    }, {\n      name: 'Secondary site',\n      entryCost: 50,\n      time: '2 hours'\n    }];\n  }\n  getTravelDetails(fromLoc, toLoc, transportMode) {\n    const distance = this.getDistance(fromLoc.id, toLoc.id);\n    let selectedMode = transportMode;\n    if (transportMode === 'mixed') {\n      if (distance > 800) selectedMode = 'flight';else if (distance > 400) selectedMode = 'train';else selectedMode = 'car';\n    }\n    const costPerKm = this.transportationCosts[selectedMode] || this.transportationCosts.train;\n    const cost = Math.round(distance * costPerKm);\n    let duration;\n    switch (selectedMode) {\n      case 'flight':\n        duration = '3 hours';\n        break;\n      case 'train':\n        duration = `${Math.ceil(distance / 60)} hours`;\n        break;\n      case 'bus':\n        duration = `${Math.ceil(distance / 45)} hours`;\n        break;\n      case 'car':\n        duration = `${Math.ceil(distance / 50)} hours`;\n        break;\n      default:\n        duration = '6 hours';\n    }\n    return {\n      mode: selectedMode,\n      distance: distance,\n      duration: duration,\n      cost: Math.max(cost, 200),\n      // Minimum cost\n      description: `${distance}km via ${selectedMode}`\n    };\n  }\n  calculateTotalDistance(path) {\n    let total = 0;\n    for (let i = 0; i < path.length - 1; i++) {\n      total += this.getDistance(path[i].id, path[i + 1].id);\n    }\n    return total;\n  }\n}","map":{"version":3,"names":["UltraAccurateRoutePlanner","constructor","locations","routes","realDistanceMatrix","transportationCosts","accommodationCosts","low","medium","high","seasonalData","months","bestRegions","temperature","min","max","rainfall","avoidRegions","createUltraAccurateRoute","preferences","console","log","interests","max_travel_days","budget_category","preferred_season","start_location","transport_modes","candidateLocations","filterLocationsByInterests","optimizedPath","optimizePath","detailedItinerary","createDetailedItinerary","length","slice","filter","location","locationTags","tags","locationCategory","category","some","interest","toLowerCase","tag","includes","startLocationId","maxDays","startLoc","find","loc","id","maxLocations","Math","floor","remainingLocations","currentLoc","nearestLoc","shortestDistance","Infinity","forEach","distance","getDistance","push","loc1Id","loc2Id","loc1","l","loc2","calculateHaversineDistance","coordinates","coord1","coord2","R","lat1","lat","lng1","lng","lat2","lng2","dLat","PI","dLng","a","sin","cos","c","atan2","sqrt","round","isDifferentRegion","regions","loc1Region","loc2Region","Object","entries","region","cities","path","transportMode","budget","itinerary","currentDay","totalCost","i","nextLocation","daysAtLocation","getOptimalDaysAtLocation","dailyCost","getAccommodationCost","getFoodCost","getLocalTransportCost","day","dayActivity","generateDayActivity","name","type","description","highlights","costs","accommodation","food","localTransport","attractions","attractionCosts","total","culturalInsights","getCulturalInsights","practicalTips","getPracticalTips","travelDetails","getAccurateTravelDetails","mode","transport","cost","mealCost","Date","now","color","map","totalDays","culturalThemes","extractCulturalThemes","optimizationMetrics","totalDistance","calculateTotalDistance","culturalDiversity","calculateCulturalDiversity","costEfficiency","calculateCostEfficiency","locationId","foodCosts","dayNumber","getLocationAttractions","selectedAttractions","join","reduce","sum","attr","entryCost","time","getTravelDetails","fromLoc","toLoc","selectedMode","costPerKm","train","duration","ceil"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/utils/enhancedRoutePlanner.js"],"sourcesContent":["// cupe-kg-frontend/src/utils/enhancedRoutePlanner.js\r\n// FIXED VERSION - Replace your entire enhancedRoutePlanner.js with this\r\n\r\nexport class UltraAccurateRoutePlanner {\r\n  constructor(locations, routes) {\r\n    this.locations = locations || [];\r\n    this.routes = routes || [];\r\n    \r\n    // Real distance matrix (in km) between major Indian cities\r\n    this.realDistanceMatrix = {\r\n      'delhi': {\r\n        'jaipur': 280, 'agra': 233, 'varanasi': 821, 'amritsar': 460,\r\n        'hampi': 1483, 'udaipur': 421, 'khajuraho': 620, 'bodh-gaya': 1105\r\n      },\r\n      'jaipur': {\r\n        'delhi': 280, 'udaipur': 393, 'taj-mahal': 240, 'ajanta': 739\r\n      },\r\n      'taj-mahal': {\r\n        'delhi': 233, 'jaipur': 240, 'khajuraho': 295, 'varanasi': 605\r\n      },\r\n      'varanasi': {\r\n        'delhi': 821, 'bodh-gaya': 250, 'khajuraho': 298, 'kolkata': 679,\r\n        'agra': 605\r\n      },\r\n      'bodh-gaya': {\r\n        'varanasi': 250, 'delhi': 1105, 'kolkata': 495, 'patna': 135\r\n      },\r\n      'hampi': {\r\n        'delhi': 1483, 'madurai': 440\r\n      },\r\n      'madurai': {\r\n        'hampi': 440, 'chennai': 462, 'bangalore': 460, 'kochi': 257\r\n      },\r\n      'amritsar': {\r\n        'delhi': 460, 'chandigarh': 230, 'shimla': 350\r\n      },\r\n      'udaipur': {\r\n        'jaipur': 393, 'delhi': 421, 'mumbai': 734, 'ajanta': 451\r\n      },\r\n      'konark': {\r\n        'bhubaneswar': 65, 'kolkata': 380, 'delhi': 1108\r\n      },\r\n      'ajanta': {\r\n        'ellora': 95, 'mumbai': 440, 'pune': 240, 'udaipur': 451\r\n      },\r\n      'ellora': {\r\n        'ajanta': 95, 'mumbai': 380, 'pune': 220\r\n      }\r\n    };\r\n\r\n    // Transportation costs (INR per km)\r\n    this.transportationCosts = {\r\n      'flight': 3.5,\r\n      'train': 0.75,\r\n      'bus': 0.45,\r\n      'car': 12\r\n    };\r\n\r\n    // Accommodation costs by city (per night)\r\n    this.accommodationCosts = {\r\n      'delhi': { low: 1200, medium: 3500, high: 8500 },\r\n      'jaipur': { low: 800, medium: 2500, high: 6500 },\r\n      'taj-mahal': { low: 900, medium: 2800, high: 7000 },\r\n      'varanasi': { low: 600, medium: 1800, high: 4500 },\r\n      'amritsar': { low: 700, medium: 2000, high: 5000 },\r\n      'udaipur': { low: 1000, medium: 3200, high: 8000 },\r\n      'hampi': { low: 500, medium: 1500, high: 3500 },\r\n      'madurai': { low: 600, medium: 1800, high: 4000 },\r\n      'bodh-gaya': { low: 400, medium: 1200, high: 2800 },\r\n      'konark': { low: 600, medium: 1600, high: 3500 },\r\n      'mahabalipuram': { low: 800, medium: 2200, high: 5500 },\r\n      'ajanta': { low: 600, medium: 1600, high: 3800 },\r\n      'ellora': { low: 600, medium: 1600, high: 3800 },\r\n      'khajuraho': { low: 700, medium: 2000, high: 4500 }\r\n    };\r\n\r\n    // Weather and seasonal data\r\n    this.seasonalData = {\r\n      'winter': {\r\n        months: ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar'],\r\n        bestRegions: ['north', 'central', 'west', 'south'],\r\n        temperature: { min: 10, max: 25 },\r\n        rainfall: 'minimal'\r\n      },\r\n      'summer': {\r\n        months: ['Apr', 'May', 'Jun'],\r\n        bestRegions: ['hills', 'north-east'],\r\n        avoidRegions: ['rajasthan', 'central'],\r\n        temperature: { min: 25, max: 45 },\r\n        rainfall: 'none'\r\n      },\r\n      'monsoon': {\r\n        months: ['Jul', 'Aug', 'Sep'],\r\n        bestRegions: ['western-ghats', 'caves'],\r\n        temperature: { min: 20, max: 30 },\r\n        rainfall: 'heavy'\r\n      }\r\n    };\r\n  }\r\n\r\n  // Main route creation function\r\n  createUltraAccurateRoute(preferences) {\r\n    console.log('Creating ultra-accurate route with preferences:', preferences);\r\n    \r\n    const {\r\n      interests = [],\r\n      max_travel_days = 7,\r\n      budget_category = 'medium',\r\n      preferred_season = 'winter',\r\n      start_location = 'delhi',\r\n      transport_modes = ['mixed']\r\n    } = preferences;\r\n\r\n    // Step 1: Filter locations by interests\r\n    const candidateLocations = this.filterLocationsByInterests(interests);\r\n    \r\n    // Step 2: Create optimized path\r\n    const optimizedPath = this.optimizePath(candidateLocations, start_location, max_travel_days);\r\n    \r\n    // Step 3: Generate detailed itinerary\r\n    const detailedItinerary = this.createDetailedItinerary(optimizedPath, transport_modes[0], budget_category);\r\n    \r\n    return detailedItinerary;\r\n  }\r\n\r\n  // Filter locations based on interests\r\n  filterLocationsByInterests(interests) {\r\n    if (!interests || interests.length === 0) {\r\n      return this.locations.slice(0, 8); // Return first 8 locations as default\r\n    }\r\n\r\n    return this.locations.filter(location => {\r\n      const locationTags = location.tags || [];\r\n      const locationCategory = location.category || '';\r\n      \r\n      return interests.some(interest => {\r\n        switch (interest.toLowerCase()) {\r\n          case 'religious':\r\n          case 'spiritual':\r\n            return locationCategory === 'religious' || \r\n                   locationTags.some(tag => \r\n                     ['temple', 'buddhist', 'hindu', 'sikh', 'religious'].includes(tag.toLowerCase())\r\n                   );\r\n          \r\n          case 'historical':\r\n          case 'heritage':\r\n            return locationCategory === 'historical' || \r\n                   locationTags.some(tag => \r\n                     ['unesco', 'heritage', 'historical'].includes(tag.toLowerCase())\r\n                   );\r\n          \r\n          case 'architectural':\r\n          case 'architecture':\r\n            return locationTags.some(tag => \r\n              ['architecture', 'palace', 'fort', 'mughal'].includes(tag.toLowerCase())\r\n            );\r\n          \r\n          case 'cultural':\r\n            return locationCategory === 'cultural';\r\n          \r\n          default:\r\n            return locationTags.some(tag => \r\n              tag.toLowerCase().includes(interest.toLowerCase())\r\n            ) || locationCategory.toLowerCase().includes(interest.toLowerCase());\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Optimize path between locations\r\n  optimizePath(locations, startLocationId, maxDays) {\r\n    if (locations.length === 0) return [];\r\n    \r\n    // Find start location\r\n    const startLoc = locations.find(loc => loc.id === startLocationId) || locations[0];\r\n    \r\n    // Calculate maximum locations (2 days per location average)\r\n    const maxLocations = Math.min(Math.floor(maxDays / 2), locations.length, 5);\r\n    \r\n    if (maxLocations <= 1) return [startLoc];\r\n    \r\n    // Simple greedy algorithm for path optimization\r\n    let optimizedPath = [startLoc];\r\n    let remainingLocations = locations.filter(loc => loc.id !== startLoc.id);\r\n    \r\n    while (optimizedPath.length < maxLocations && remainingLocations.length > 0) {\r\n      const currentLoc = optimizedPath[optimizedPath.length - 1];\r\n      \r\n      // Find nearest location\r\n      let nearestLoc = null;\r\n      let shortestDistance = Infinity;\r\n      \r\n      remainingLocations.forEach(loc => {\r\n        const distance = this.getDistance(currentLoc.id, loc.id);\r\n        if (distance < shortestDistance) {\r\n          shortestDistance = distance;\r\n          nearestLoc = loc;\r\n        }\r\n      });\r\n      \r\n      if (nearestLoc) {\r\n        optimizedPath.push(nearestLoc);\r\n        remainingLocations = remainingLocations.filter(loc => loc.id !== nearestLoc.id);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return optimizedPath;\r\n  }\r\n\r\n  // Get distance between two locations\r\n  getDistance(loc1Id, loc2Id) {\r\n    // Check real distance matrix first\r\n    if (this.realDistanceMatrix[loc1Id] && this.realDistanceMatrix[loc1Id][loc2Id]) {\r\n      return this.realDistanceMatrix[loc1Id][loc2Id];\r\n    }\r\n    if (this.realDistanceMatrix[loc2Id] && this.realDistanceMatrix[loc2Id][loc1Id]) {\r\n      return this.realDistanceMatrix[loc2Id][loc1Id];\r\n    }\r\n    \r\n    // Fallback to coordinate calculation\r\n    const loc1 = this.locations.find(l => l.id === loc1Id);\r\n    const loc2 = this.locations.find(l => l.id === loc2Id);\r\n    \r\n    if (!loc1 || !loc2) return 1000; // High penalty for unknown locations\r\n    \r\n    return this.calculateHaversineDistance(loc1.coordinates, loc2.coordinates);\r\n  }\r\n\r\n  // Calculate Haversine distance\r\n  calculateHaversineDistance(coord1, coord2) {\r\n    const R = 6371; // Earth's radius in km\r\n    const lat1 = coord1.lat || coord1[0];\r\n    const lng1 = coord1.lng || coord1[1];\r\n    const lat2 = coord2.lat || coord2[0];\r\n    const lng2 = coord2.lng || coord2[1];\r\n    \r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    \r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n              Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return Math.round(R * c);\r\n  }\r\n\r\n  // Check if locations are in different regions\r\n  isDifferentRegion(loc1, loc2) {\r\n    const regions = {\r\n      'north': ['delhi', 'agra', 'jaipur', 'amritsar'],\r\n      'west': ['udaipur', 'ajanta', 'ellora'],\r\n      'central': ['khajuraho', 'bodh-gaya', 'varanasi'],\r\n      'south': ['hampi', 'madurai', 'mahabalipuram'],\r\n      'east': ['konark']\r\n    };\r\n    \r\n    let loc1Region = null, loc2Region = null;\r\n    \r\n    Object.entries(regions).forEach(([region, cities]) => {\r\n      if (cities.includes(loc1.id)) loc1Region = region;\r\n      if (cities.includes(loc2.id)) loc2Region = region;\r\n    });\r\n    \r\n    return loc1Region !== loc2Region;\r\n  }\r\n\r\n  // Create detailed itinerary\r\n  createDetailedItinerary(path, transportMode, budget) {\r\n    const itinerary = [];\r\n    let currentDay = 1;\r\n    let totalCost = 0;\r\n    \r\n    for (let i = 0; i < path.length; i++) {\r\n      const location = path[i];\r\n      const nextLocation = path[i + 1];\r\n      \r\n      // Location exploration days\r\n      const daysAtLocation = this.getOptimalDaysAtLocation(location);\r\n      const dailyCost = this.getAccommodationCost(location.id, budget) + \r\n                       this.getFoodCost(budget) + \r\n                       this.getLocalTransportCost();\r\n      \r\n      for (let day = 0; day < daysAtLocation; day++) {\r\n        const dayActivity = this.generateDayActivity(location, day, budget);\r\n        itinerary.push({\r\n          day: currentDay + day,\r\n          location: location.name,\r\n          type: 'exploration',\r\n          description: dayActivity.description,\r\n          highlights: dayActivity.highlights,\r\n          costs: {\r\n            accommodation: this.getAccommodationCost(location.id, budget),\r\n            food: this.getFoodCost(budget),\r\n            localTransport: this.getLocalTransportCost(),\r\n            attractions: dayActivity.attractionCosts,\r\n            total: dailyCost + dayActivity.attractionCosts\r\n          },\r\n          culturalInsights: this.getCulturalInsights(location),\r\n          practicalTips: this.getPracticalTips(location)\r\n        });\r\n        totalCost += dailyCost + dayActivity.attractionCosts;\r\n      }\r\n      \r\n      currentDay += daysAtLocation;\r\n      \r\n      // Travel day\r\n      if (nextLocation) {\r\n        const travelDetails = this.getAccurateTravelDetails(location, nextLocation, transportMode);\r\n        itinerary.push({\r\n          day: currentDay,\r\n          location: `${location.name} to ${nextLocation.name}`,\r\n          type: 'travel',\r\n          description: `Travel from ${location.name} to ${nextLocation.name} via ${travelDetails.mode}`,\r\n          travelDetails: travelDetails,\r\n          costs: {\r\n            transport: travelDetails.cost,\r\n            food: travelDetails.mealCost || 0,\r\n            total: travelDetails.cost + (travelDetails.mealCost || 0)\r\n          }\r\n        });\r\n        totalCost += travelDetails.cost + (travelDetails.mealCost || 0);\r\n        currentDay++;\r\n      }\r\n    }\r\n    \r\n    return {\r\n      id: `ultra-accurate-${Date.now()}`,\r\n      name: 'Your Culturally Intelligent Route',\r\n      description: `Scientifically optimized ${path.length}-destination route with cultural depth`,\r\n      color: '#2196F3',\r\n      path: path.map(loc => [loc.coordinates.lat, loc.coordinates.lng]),\r\n      locations: path.map(loc => ({\r\n        name: loc.name,\r\n        coordinates: [loc.coordinates.lat, loc.coordinates.lng],\r\n        description: loc.description\r\n      })),\r\n      detailedItinerary: itinerary,\r\n      totalCost: Math.round(totalCost),\r\n      totalDays: currentDay - 1,\r\n      culturalThemes: this.extractCulturalThemes(path),\r\n      optimizationMetrics: {\r\n        totalDistance: this.calculateTotalDistance(path),\r\n        culturalDiversity: this.calculateCulturalDiversity(path),\r\n        costEfficiency: this.calculateCostEfficiency(totalCost, path.length)\r\n      }\r\n    };\r\n  }\r\n\r\n  // Helper methods for accurate cost calculation\r\n  getAccommodationCost(locationId, budget) {\r\n    const costs = this.accommodationCosts[locationId] || { low: 800, medium: 2500, high: 6000 };\r\n    return costs[budget] || costs.medium;\r\n  }\r\n\r\n  getFoodCost(budget) {\r\n    const foodCosts = { low: 800, medium: 1500, high: 3000 };\r\n    return foodCosts[budget] || foodCosts.medium;\r\n  }\r\n\r\n  getLocalTransportCost() {\r\n    return 500; // Average local transport per day\r\n  }\r\n\r\n  // Generate detailed day activities\r\n  generateDayActivity(location, dayNumber, budget) {\r\n    const attractions = this.getLocationAttractions(location.id);\r\n    const selectedAttractions = attractions.slice(dayNumber * 2, (dayNumber + 1) * 2);\r\n    \r\n    return {\r\n      description: `Day ${dayNumber + 1} in ${location.name}: ${selectedAttractions.map(a => a.name).join(', ')}`,\r\n      highlights: selectedAttractions,\r\n      attractionCosts: selectedAttractions.reduce((sum, attr) => sum + (attr.entryCost || 0), 0)\r\n    };\r\n  }\r\n\r\n  // Get location-specific attractions with costs\r\n  getLocationAttractions(locationId) {\r\n    const attractions = {\r\n      'delhi': [\r\n        { name: 'Red Fort', entryCost: 35, time: '3 hours' },\r\n        { name: 'India Gate', entryCost: 0, time: '1 hour' },\r\n        { name: 'Qutub Minar', entryCost: 30, time: '2 hours' },\r\n        { name: 'Humayun\\'s Tomb', entryCost: 30, time: '2 hours' }\r\n      ],\r\n      'jaipur': [\r\n        { name: 'Hawa Mahal', entryCost: 50, time: '1 hour' },\r\n        { name: 'City Palace', entryCost: 300, time: '3 hours' },\r\n        { name: 'Amber Fort', entryCost: 200, time: '4 hours' },\r\n        { name: 'Jantar Mantar', entryCost: 40, time: '1 hour' }\r\n      ],\r\n      'taj-mahal': [\r\n        { name: 'Taj Mahal', entryCost: 1100, time: '4 hours' },\r\n        { name: 'Agra Fort', entryCost: 650, time: '3 hours' },\r\n        { name: 'Mehtab Bagh', entryCost: 300, time: '2 hours' }\r\n      ]\r\n      // Add more locations...\r\n    };\r\n    \r\n    return attractions[locationId] || [\r\n      { name: 'Main attraction', entryCost: 100, time: '3 hours' },\r\n      { name: 'Secondary site', entryCost: 50, time: '2 hours' }\r\n    ];\r\n  }\r\n\r\n  getTravelDetails(fromLoc, toLoc, transportMode) {\r\n    const distance = this.getDistance(fromLoc.id, toLoc.id);\r\n    \r\n    let selectedMode = transportMode;\r\n    if (transportMode === 'mixed') {\r\n      if (distance > 800) selectedMode = 'flight';\r\n      else if (distance > 400) selectedMode = 'train';\r\n      else selectedMode = 'car';\r\n    }\r\n    \r\n    const costPerKm = this.transportationCosts[selectedMode] || this.transportationCosts.train;\r\n    const cost = Math.round(distance * costPerKm);\r\n    \r\n    let duration;\r\n    switch (selectedMode) {\r\n      case 'flight':\r\n        duration = '3 hours';\r\n        break;\r\n      case 'train':\r\n        duration = `${Math.ceil(distance / 60)} hours`;\r\n        break;\r\n      case 'bus':\r\n        duration = `${Math.ceil(distance / 45)} hours`;\r\n        break;\r\n      case 'car':\r\n        duration = `${Math.ceil(distance / 50)} hours`;\r\n        break;\r\n      default:\r\n        duration = '6 hours';\r\n    }\r\n    \r\n    return {\r\n      mode: selectedMode,\r\n      distance: distance,\r\n      duration: duration,\r\n      cost: Math.max(cost, 200), // Minimum cost\r\n      description: `${distance}km via ${selectedMode}`\r\n    };\r\n  }\r\n\r\n  calculateTotalDistance(path) {\r\n    let total = 0;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n      total += this.getDistance(path[i].id, path[i + 1].id);\r\n    }\r\n    return total;\r\n  }\r\n}"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,yBAAyB,CAAC;EACrCC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC7B,IAAI,CAACD,SAAS,GAAGA,SAAS,IAAI,EAAE;IAChC,IAAI,CAACC,MAAM,GAAGA,MAAM,IAAI,EAAE;;IAE1B;IACA,IAAI,CAACC,kBAAkB,GAAG;MACxB,OAAO,EAAE;QACP,QAAQ,EAAE,GAAG;QAAE,MAAM,EAAE,GAAG;QAAE,UAAU,EAAE,GAAG;QAAE,UAAU,EAAE,GAAG;QAC5D,OAAO,EAAE,IAAI;QAAE,SAAS,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,WAAW,EAAE;MAChE,CAAC;MACD,QAAQ,EAAE;QACR,OAAO,EAAE,GAAG;QAAE,SAAS,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,QAAQ,EAAE;MAC5D,CAAC;MACD,WAAW,EAAE;QACX,OAAO,EAAE,GAAG;QAAE,QAAQ,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,UAAU,EAAE;MAC7D,CAAC;MACD,UAAU,EAAE;QACV,OAAO,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,SAAS,EAAE,GAAG;QAChE,MAAM,EAAE;MACV,CAAC;MACD,WAAW,EAAE;QACX,UAAU,EAAE,GAAG;QAAE,OAAO,EAAE,IAAI;QAAE,SAAS,EAAE,GAAG;QAAE,OAAO,EAAE;MAC3D,CAAC;MACD,OAAO,EAAE;QACP,OAAO,EAAE,IAAI;QAAE,SAAS,EAAE;MAC5B,CAAC;MACD,SAAS,EAAE;QACT,OAAO,EAAE,GAAG;QAAE,SAAS,EAAE,GAAG;QAAE,WAAW,EAAE,GAAG;QAAE,OAAO,EAAE;MAC3D,CAAC;MACD,UAAU,EAAE;QACV,OAAO,EAAE,GAAG;QAAE,YAAY,EAAE,GAAG;QAAE,QAAQ,EAAE;MAC7C,CAAC;MACD,SAAS,EAAE;QACT,QAAQ,EAAE,GAAG;QAAE,OAAO,EAAE,GAAG;QAAE,QAAQ,EAAE,GAAG;QAAE,QAAQ,EAAE;MACxD,CAAC;MACD,QAAQ,EAAE;QACR,aAAa,EAAE,EAAE;QAAE,SAAS,EAAE,GAAG;QAAE,OAAO,EAAE;MAC9C,CAAC;MACD,QAAQ,EAAE;QACR,QAAQ,EAAE,EAAE;QAAE,QAAQ,EAAE,GAAG;QAAE,MAAM,EAAE,GAAG;QAAE,SAAS,EAAE;MACvD,CAAC;MACD,QAAQ,EAAE;QACR,QAAQ,EAAE,EAAE;QAAE,QAAQ,EAAE,GAAG;QAAE,MAAM,EAAE;MACvC;IACF,CAAC;;IAED;IACA,IAAI,CAACC,mBAAmB,GAAG;MACzB,QAAQ,EAAE,GAAG;MACb,OAAO,EAAE,IAAI;MACb,KAAK,EAAE,IAAI;MACX,KAAK,EAAE;IACT,CAAC;;IAED;IACA,IAAI,CAACC,kBAAkB,GAAG;MACxB,OAAO,EAAE;QAAEC,GAAG,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAChD,QAAQ,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAChD,WAAW,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MACnD,UAAU,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAClD,UAAU,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAClD,SAAS,EAAE;QAAEF,GAAG,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAClD,OAAO,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAC/C,SAAS,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MACjD,WAAW,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MACnD,QAAQ,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAChD,eAAe,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MACvD,QAAQ,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAChD,QAAQ,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC;MAChD,WAAW,EAAE;QAAEF,GAAG,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK;IACpD,CAAC;;IAED;IACA,IAAI,CAACC,YAAY,GAAG;MAClB,QAAQ,EAAE;QACRC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAClDC,WAAW,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;QAClDC,WAAW,EAAE;UAAEC,GAAG,EAAE,EAAE;UAAEC,GAAG,EAAE;QAAG,CAAC;QACjCC,QAAQ,EAAE;MACZ,CAAC;MACD,QAAQ,EAAE;QACRL,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAC7BC,WAAW,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC;QACpCK,YAAY,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;QACtCJ,WAAW,EAAE;UAAEC,GAAG,EAAE,EAAE;UAAEC,GAAG,EAAE;QAAG,CAAC;QACjCC,QAAQ,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;QACTL,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAC7BC,WAAW,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC;QACvCC,WAAW,EAAE;UAAEC,GAAG,EAAE,EAAE;UAAEC,GAAG,EAAE;QAAG,CAAC;QACjCC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH;;EAEA;EACAE,wBAAwBA,CAACC,WAAW,EAAE;IACpCC,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEF,WAAW,CAAC;IAE3E,MAAM;MACJG,SAAS,GAAG,EAAE;MACdC,eAAe,GAAG,CAAC;MACnBC,eAAe,GAAG,QAAQ;MAC1BC,gBAAgB,GAAG,QAAQ;MAC3BC,cAAc,GAAG,OAAO;MACxBC,eAAe,GAAG,CAAC,OAAO;IAC5B,CAAC,GAAGR,WAAW;;IAEf;IACA,MAAMS,kBAAkB,GAAG,IAAI,CAACC,0BAA0B,CAACP,SAAS,CAAC;;IAErE;IACA,MAAMQ,aAAa,GAAG,IAAI,CAACC,YAAY,CAACH,kBAAkB,EAAEF,cAAc,EAAEH,eAAe,CAAC;;IAE5F;IACA,MAAMS,iBAAiB,GAAG,IAAI,CAACC,uBAAuB,CAACH,aAAa,EAAEH,eAAe,CAAC,CAAC,CAAC,EAAEH,eAAe,CAAC;IAE1G,OAAOQ,iBAAiB;EAC1B;;EAEA;EACAH,0BAA0BA,CAACP,SAAS,EAAE;IACpC,IAAI,CAACA,SAAS,IAAIA,SAAS,CAACY,MAAM,KAAK,CAAC,EAAE;MACxC,OAAO,IAAI,CAAChC,SAAS,CAACiC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC;IAEA,OAAO,IAAI,CAACjC,SAAS,CAACkC,MAAM,CAACC,QAAQ,IAAI;MACvC,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,IAAI,EAAE;MACxC,MAAMC,gBAAgB,GAAGH,QAAQ,CAACI,QAAQ,IAAI,EAAE;MAEhD,OAAOnB,SAAS,CAACoB,IAAI,CAACC,QAAQ,IAAI;QAChC,QAAQA,QAAQ,CAACC,WAAW,CAAC,CAAC;UAC5B,KAAK,WAAW;UAChB,KAAK,WAAW;YACd,OAAOJ,gBAAgB,KAAK,WAAW,IAChCF,YAAY,CAACI,IAAI,CAACG,GAAG,IACnB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACD,WAAW,CAAC,CAAC,CACjF,CAAC;UAEV,KAAK,YAAY;UACjB,KAAK,UAAU;YACb,OAAOJ,gBAAgB,KAAK,YAAY,IACjCF,YAAY,CAACI,IAAI,CAACG,GAAG,IACnB,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACD,WAAW,CAAC,CAAC,CACjE,CAAC;UAEV,KAAK,eAAe;UACpB,KAAK,cAAc;YACjB,OAAON,YAAY,CAACI,IAAI,CAACG,GAAG,IAC1B,CAAC,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACD,WAAW,CAAC,CAAC,CACzE,CAAC;UAEH,KAAK,UAAU;YACb,OAAOJ,gBAAgB,KAAK,UAAU;UAExC;YACE,OAAOF,YAAY,CAACI,IAAI,CAACG,GAAG,IAC1BA,GAAG,CAACD,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,QAAQ,CAACC,WAAW,CAAC,CAAC,CACnD,CAAC,IAAIJ,gBAAgB,CAACI,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;QACxE;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;EACAb,YAAYA,CAAC7B,SAAS,EAAE6C,eAAe,EAAEC,OAAO,EAAE;IAChD,IAAI9C,SAAS,CAACgC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;;IAErC;IACA,MAAMe,QAAQ,GAAG/C,SAAS,CAACgD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKL,eAAe,CAAC,IAAI7C,SAAS,CAAC,CAAC,CAAC;;IAElF;IACA,MAAMmD,YAAY,GAAGC,IAAI,CAACxC,GAAG,CAACwC,IAAI,CAACC,KAAK,CAACP,OAAO,GAAG,CAAC,CAAC,EAAE9C,SAAS,CAACgC,MAAM,EAAE,CAAC,CAAC;IAE3E,IAAImB,YAAY,IAAI,CAAC,EAAE,OAAO,CAACJ,QAAQ,CAAC;;IAExC;IACA,IAAInB,aAAa,GAAG,CAACmB,QAAQ,CAAC;IAC9B,IAAIO,kBAAkB,GAAGtD,SAAS,CAACkC,MAAM,CAACe,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKH,QAAQ,CAACG,EAAE,CAAC;IAExE,OAAOtB,aAAa,CAACI,MAAM,GAAGmB,YAAY,IAAIG,kBAAkB,CAACtB,MAAM,GAAG,CAAC,EAAE;MAC3E,MAAMuB,UAAU,GAAG3B,aAAa,CAACA,aAAa,CAACI,MAAM,GAAG,CAAC,CAAC;;MAE1D;MACA,IAAIwB,UAAU,GAAG,IAAI;MACrB,IAAIC,gBAAgB,GAAGC,QAAQ;MAE/BJ,kBAAkB,CAACK,OAAO,CAACV,GAAG,IAAI;QAChC,MAAMW,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACN,UAAU,CAACL,EAAE,EAAED,GAAG,CAACC,EAAE,CAAC;QACxD,IAAIU,QAAQ,GAAGH,gBAAgB,EAAE;UAC/BA,gBAAgB,GAAGG,QAAQ;UAC3BJ,UAAU,GAAGP,GAAG;QAClB;MACF,CAAC,CAAC;MAEF,IAAIO,UAAU,EAAE;QACd5B,aAAa,CAACkC,IAAI,CAACN,UAAU,CAAC;QAC9BF,kBAAkB,GAAGA,kBAAkB,CAACpB,MAAM,CAACe,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKM,UAAU,CAACN,EAAE,CAAC;MACjF,CAAC,MAAM;QACL;MACF;IACF;IAEA,OAAOtB,aAAa;EACtB;;EAEA;EACAiC,WAAWA,CAACE,MAAM,EAAEC,MAAM,EAAE;IAC1B;IACA,IAAI,IAAI,CAAC9D,kBAAkB,CAAC6D,MAAM,CAAC,IAAI,IAAI,CAAC7D,kBAAkB,CAAC6D,MAAM,CAAC,CAACC,MAAM,CAAC,EAAE;MAC9E,OAAO,IAAI,CAAC9D,kBAAkB,CAAC6D,MAAM,CAAC,CAACC,MAAM,CAAC;IAChD;IACA,IAAI,IAAI,CAAC9D,kBAAkB,CAAC8D,MAAM,CAAC,IAAI,IAAI,CAAC9D,kBAAkB,CAAC8D,MAAM,CAAC,CAACD,MAAM,CAAC,EAAE;MAC9E,OAAO,IAAI,CAAC7D,kBAAkB,CAAC8D,MAAM,CAAC,CAACD,MAAM,CAAC;IAChD;;IAEA;IACA,MAAME,IAAI,GAAG,IAAI,CAACjE,SAAS,CAACgD,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKa,MAAM,CAAC;IACtD,MAAMI,IAAI,GAAG,IAAI,CAACnE,SAAS,CAACgD,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKc,MAAM,CAAC;IAEtD,IAAI,CAACC,IAAI,IAAI,CAACE,IAAI,EAAE,OAAO,IAAI,CAAC,CAAC;;IAEjC,OAAO,IAAI,CAACC,0BAA0B,CAACH,IAAI,CAACI,WAAW,EAAEF,IAAI,CAACE,WAAW,CAAC;EAC5E;;EAEA;EACAD,0BAA0BA,CAACE,MAAM,EAAEC,MAAM,EAAE;IACzC,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChB,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAG,IAAIJ,MAAM,CAAC,CAAC,CAAC;IACpC,MAAMK,IAAI,GAAGL,MAAM,CAACM,GAAG,IAAIN,MAAM,CAAC,CAAC,CAAC;IACpC,MAAMO,IAAI,GAAGN,MAAM,CAACG,GAAG,IAAIH,MAAM,CAAC,CAAC,CAAC;IACpC,MAAMO,IAAI,GAAGP,MAAM,CAACK,GAAG,IAAIL,MAAM,CAAC,CAAC,CAAC;IAEpC,MAAMQ,IAAI,GAAG,CAACF,IAAI,GAAGJ,IAAI,IAAIrB,IAAI,CAAC4B,EAAE,GAAG,GAAG;IAC1C,MAAMC,IAAI,GAAG,CAACH,IAAI,GAAGH,IAAI,IAAIvB,IAAI,CAAC4B,EAAE,GAAG,GAAG;IAE1C,MAAME,CAAC,GAAG9B,IAAI,CAAC+B,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC,GAAG3B,IAAI,CAAC+B,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC,GACnC3B,IAAI,CAACgC,GAAG,CAACX,IAAI,GAAGrB,IAAI,CAAC4B,EAAE,GAAG,GAAG,CAAC,GAAG5B,IAAI,CAACgC,GAAG,CAACP,IAAI,GAAGzB,IAAI,CAAC4B,EAAE,GAAG,GAAG,CAAC,GAC/D5B,IAAI,CAAC+B,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC,GAAG7B,IAAI,CAAC+B,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC;IAE7C,MAAMI,CAAC,GAAG,CAAC,GAAGjC,IAAI,CAACkC,KAAK,CAAClC,IAAI,CAACmC,IAAI,CAACL,CAAC,CAAC,EAAE9B,IAAI,CAACmC,IAAI,CAAC,CAAC,GAACL,CAAC,CAAC,CAAC;IACtD,OAAO9B,IAAI,CAACoC,KAAK,CAAChB,CAAC,GAAGa,CAAC,CAAC;EAC1B;;EAEA;EACAI,iBAAiBA,CAACxB,IAAI,EAAEE,IAAI,EAAE;IAC5B,MAAMuB,OAAO,GAAG;MACd,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;MAChD,MAAM,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC;MACvC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,UAAU,CAAC;MACjD,OAAO,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,eAAe,CAAC;MAC9C,MAAM,EAAE,CAAC,QAAQ;IACnB,CAAC;IAED,IAAIC,UAAU,GAAG,IAAI;MAAEC,UAAU,GAAG,IAAI;IAExCC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAAC/B,OAAO,CAAC,CAAC,CAACoC,MAAM,EAAEC,MAAM,CAAC,KAAK;MACpD,IAAIA,MAAM,CAACpD,QAAQ,CAACqB,IAAI,CAACf,EAAE,CAAC,EAAEyC,UAAU,GAAGI,MAAM;MACjD,IAAIC,MAAM,CAACpD,QAAQ,CAACuB,IAAI,CAACjB,EAAE,CAAC,EAAE0C,UAAU,GAAGG,MAAM;IACnD,CAAC,CAAC;IAEF,OAAOJ,UAAU,KAAKC,UAAU;EAClC;;EAEA;EACA7D,uBAAuBA,CAACkE,IAAI,EAAEC,aAAa,EAAEC,MAAM,EAAE;IACnD,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,SAAS,GAAG,CAAC;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACjE,MAAM,EAAEuE,CAAC,EAAE,EAAE;MACpC,MAAMpE,QAAQ,GAAG8D,IAAI,CAACM,CAAC,CAAC;MACxB,MAAMC,YAAY,GAAGP,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC;;MAEhC;MACA,MAAME,cAAc,GAAG,IAAI,CAACC,wBAAwB,CAACvE,QAAQ,CAAC;MAC9D,MAAMwE,SAAS,GAAG,IAAI,CAACC,oBAAoB,CAACzE,QAAQ,CAACe,EAAE,EAAEiD,MAAM,CAAC,GAC/C,IAAI,CAACU,WAAW,CAACV,MAAM,CAAC,GACxB,IAAI,CAACW,qBAAqB,CAAC,CAAC;MAE7C,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGN,cAAc,EAAEM,GAAG,EAAE,EAAE;QAC7C,MAAMC,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAAC9E,QAAQ,EAAE4E,GAAG,EAAEZ,MAAM,CAAC;QACnEC,SAAS,CAACtC,IAAI,CAAC;UACbiD,GAAG,EAAEV,UAAU,GAAGU,GAAG;UACrB5E,QAAQ,EAAEA,QAAQ,CAAC+E,IAAI;UACvBC,IAAI,EAAE,aAAa;UACnBC,WAAW,EAAEJ,WAAW,CAACI,WAAW;UACpCC,UAAU,EAAEL,WAAW,CAACK,UAAU;UAClCC,KAAK,EAAE;YACLC,aAAa,EAAE,IAAI,CAACX,oBAAoB,CAACzE,QAAQ,CAACe,EAAE,EAAEiD,MAAM,CAAC;YAC7DqB,IAAI,EAAE,IAAI,CAACX,WAAW,CAACV,MAAM,CAAC;YAC9BsB,cAAc,EAAE,IAAI,CAACX,qBAAqB,CAAC,CAAC;YAC5CY,WAAW,EAAEV,WAAW,CAACW,eAAe;YACxCC,KAAK,EAAEjB,SAAS,GAAGK,WAAW,CAACW;UACjC,CAAC;UACDE,gBAAgB,EAAE,IAAI,CAACC,mBAAmB,CAAC3F,QAAQ,CAAC;UACpD4F,aAAa,EAAE,IAAI,CAACC,gBAAgB,CAAC7F,QAAQ;QAC/C,CAAC,CAAC;QACFmE,SAAS,IAAIK,SAAS,GAAGK,WAAW,CAACW,eAAe;MACtD;MAEAtB,UAAU,IAAII,cAAc;;MAE5B;MACA,IAAID,YAAY,EAAE;QAChB,MAAMyB,aAAa,GAAG,IAAI,CAACC,wBAAwB,CAAC/F,QAAQ,EAAEqE,YAAY,EAAEN,aAAa,CAAC;QAC1FE,SAAS,CAACtC,IAAI,CAAC;UACbiD,GAAG,EAAEV,UAAU;UACflE,QAAQ,EAAE,GAAGA,QAAQ,CAAC+E,IAAI,OAAOV,YAAY,CAACU,IAAI,EAAE;UACpDC,IAAI,EAAE,QAAQ;UACdC,WAAW,EAAE,eAAejF,QAAQ,CAAC+E,IAAI,OAAOV,YAAY,CAACU,IAAI,QAAQe,aAAa,CAACE,IAAI,EAAE;UAC7FF,aAAa,EAAEA,aAAa;UAC5BX,KAAK,EAAE;YACLc,SAAS,EAAEH,aAAa,CAACI,IAAI;YAC7Bb,IAAI,EAAES,aAAa,CAACK,QAAQ,IAAI,CAAC;YACjCV,KAAK,EAAEK,aAAa,CAACI,IAAI,IAAIJ,aAAa,CAACK,QAAQ,IAAI,CAAC;UAC1D;QACF,CAAC,CAAC;QACFhC,SAAS,IAAI2B,aAAa,CAACI,IAAI,IAAIJ,aAAa,CAACK,QAAQ,IAAI,CAAC,CAAC;QAC/DjC,UAAU,EAAE;MACd;IACF;IAEA,OAAO;MACLnD,EAAE,EAAE,kBAAkBqF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAClCtB,IAAI,EAAE,mCAAmC;MACzCE,WAAW,EAAE,4BAA4BnB,IAAI,CAACjE,MAAM,wCAAwC;MAC5FyG,KAAK,EAAE,SAAS;MAChBxC,IAAI,EAAEA,IAAI,CAACyC,GAAG,CAACzF,GAAG,IAAI,CAACA,GAAG,CAACoB,WAAW,CAACK,GAAG,EAAEzB,GAAG,CAACoB,WAAW,CAACO,GAAG,CAAC,CAAC;MACjE5E,SAAS,EAAEiG,IAAI,CAACyC,GAAG,CAACzF,GAAG,KAAK;QAC1BiE,IAAI,EAAEjE,GAAG,CAACiE,IAAI;QACd7C,WAAW,EAAE,CAACpB,GAAG,CAACoB,WAAW,CAACK,GAAG,EAAEzB,GAAG,CAACoB,WAAW,CAACO,GAAG,CAAC;QACvDwC,WAAW,EAAEnE,GAAG,CAACmE;MACnB,CAAC,CAAC,CAAC;MACHtF,iBAAiB,EAAEsE,SAAS;MAC5BE,SAAS,EAAElD,IAAI,CAACoC,KAAK,CAACc,SAAS,CAAC;MAChCqC,SAAS,EAAEtC,UAAU,GAAG,CAAC;MACzBuC,cAAc,EAAE,IAAI,CAACC,qBAAqB,CAAC5C,IAAI,CAAC;MAChD6C,mBAAmB,EAAE;QACnBC,aAAa,EAAE,IAAI,CAACC,sBAAsB,CAAC/C,IAAI,CAAC;QAChDgD,iBAAiB,EAAE,IAAI,CAACC,0BAA0B,CAACjD,IAAI,CAAC;QACxDkD,cAAc,EAAE,IAAI,CAACC,uBAAuB,CAAC9C,SAAS,EAAEL,IAAI,CAACjE,MAAM;MACrE;IACF,CAAC;EACH;;EAEA;EACA4E,oBAAoBA,CAACyC,UAAU,EAAElD,MAAM,EAAE;IACvC,MAAMmB,KAAK,GAAG,IAAI,CAAClH,kBAAkB,CAACiJ,UAAU,CAAC,IAAI;MAAEhJ,GAAG,EAAE,GAAG;MAAEC,MAAM,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC;IAC3F,OAAO+G,KAAK,CAACnB,MAAM,CAAC,IAAImB,KAAK,CAAChH,MAAM;EACtC;EAEAuG,WAAWA,CAACV,MAAM,EAAE;IAClB,MAAMmD,SAAS,GAAG;MAAEjJ,GAAG,EAAE,GAAG;MAAEC,MAAM,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC;IACxD,OAAO+I,SAAS,CAACnD,MAAM,CAAC,IAAImD,SAAS,CAAChJ,MAAM;EAC9C;EAEAwG,qBAAqBA,CAAA,EAAG;IACtB,OAAO,GAAG,CAAC,CAAC;EACd;;EAEA;EACAG,mBAAmBA,CAAC9E,QAAQ,EAAEoH,SAAS,EAAEpD,MAAM,EAAE;IAC/C,MAAMuB,WAAW,GAAG,IAAI,CAAC8B,sBAAsB,CAACrH,QAAQ,CAACe,EAAE,CAAC;IAC5D,MAAMuG,mBAAmB,GAAG/B,WAAW,CAACzF,KAAK,CAACsH,SAAS,GAAG,CAAC,EAAE,CAACA,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IAEjF,OAAO;MACLnC,WAAW,EAAE,OAAOmC,SAAS,GAAG,CAAC,OAAOpH,QAAQ,CAAC+E,IAAI,KAAKuC,mBAAmB,CAACf,GAAG,CAACxD,CAAC,IAAIA,CAAC,CAACgC,IAAI,CAAC,CAACwC,IAAI,CAAC,IAAI,CAAC,EAAE;MAC3GrC,UAAU,EAAEoC,mBAAmB;MAC/B9B,eAAe,EAAE8B,mBAAmB,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACC,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC;IAC3F,CAAC;EACH;;EAEA;EACAN,sBAAsBA,CAACH,UAAU,EAAE;IACjC,MAAM3B,WAAW,GAAG;MAClB,OAAO,EAAE,CACP;QAAER,IAAI,EAAE,UAAU;QAAE4C,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC,EACpD;QAAE7C,IAAI,EAAE,YAAY;QAAE4C,SAAS,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAS,CAAC,EACpD;QAAE7C,IAAI,EAAE,aAAa;QAAE4C,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC,EACvD;QAAE7C,IAAI,EAAE,iBAAiB;QAAE4C,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC,CAC5D;MACD,QAAQ,EAAE,CACR;QAAE7C,IAAI,EAAE,YAAY;QAAE4C,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAS,CAAC,EACrD;QAAE7C,IAAI,EAAE,aAAa;QAAE4C,SAAS,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAU,CAAC,EACxD;QAAE7C,IAAI,EAAE,YAAY;QAAE4C,SAAS,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAU,CAAC,EACvD;QAAE7C,IAAI,EAAE,eAAe;QAAE4C,SAAS,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAS,CAAC,CACzD;MACD,WAAW,EAAE,CACX;QAAE7C,IAAI,EAAE,WAAW;QAAE4C,SAAS,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAU,CAAC,EACvD;QAAE7C,IAAI,EAAE,WAAW;QAAE4C,SAAS,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAU,CAAC,EACtD;QAAE7C,IAAI,EAAE,aAAa;QAAE4C,SAAS,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAU,CAAC;MAE1D;IACF,CAAC;IAED,OAAOrC,WAAW,CAAC2B,UAAU,CAAC,IAAI,CAChC;MAAEnC,IAAI,EAAE,iBAAiB;MAAE4C,SAAS,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAU,CAAC,EAC5D;MAAE7C,IAAI,EAAE,gBAAgB;MAAE4C,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAC3D;EACH;EAEAC,gBAAgBA,CAACC,OAAO,EAAEC,KAAK,EAAEhE,aAAa,EAAE;IAC9C,MAAMtC,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACoG,OAAO,CAAC/G,EAAE,EAAEgH,KAAK,CAAChH,EAAE,CAAC;IAEvD,IAAIiH,YAAY,GAAGjE,aAAa;IAChC,IAAIA,aAAa,KAAK,OAAO,EAAE;MAC7B,IAAItC,QAAQ,GAAG,GAAG,EAAEuG,YAAY,GAAG,QAAQ,CAAC,KACvC,IAAIvG,QAAQ,GAAG,GAAG,EAAEuG,YAAY,GAAG,OAAO,CAAC,KAC3CA,YAAY,GAAG,KAAK;IAC3B;IAEA,MAAMC,SAAS,GAAG,IAAI,CAACjK,mBAAmB,CAACgK,YAAY,CAAC,IAAI,IAAI,CAAChK,mBAAmB,CAACkK,KAAK;IAC1F,MAAMhC,IAAI,GAAGjF,IAAI,CAACoC,KAAK,CAAC5B,QAAQ,GAAGwG,SAAS,CAAC;IAE7C,IAAIE,QAAQ;IACZ,QAAQH,YAAY;MAClB,KAAK,QAAQ;QACXG,QAAQ,GAAG,SAAS;QACpB;MACF,KAAK,OAAO;QACVA,QAAQ,GAAG,GAAGlH,IAAI,CAACmH,IAAI,CAAC3G,QAAQ,GAAG,EAAE,CAAC,QAAQ;QAC9C;MACF,KAAK,KAAK;QACR0G,QAAQ,GAAG,GAAGlH,IAAI,CAACmH,IAAI,CAAC3G,QAAQ,GAAG,EAAE,CAAC,QAAQ;QAC9C;MACF,KAAK,KAAK;QACR0G,QAAQ,GAAG,GAAGlH,IAAI,CAACmH,IAAI,CAAC3G,QAAQ,GAAG,EAAE,CAAC,QAAQ;QAC9C;MACF;QACE0G,QAAQ,GAAG,SAAS;IACxB;IAEA,OAAO;MACLnC,IAAI,EAAEgC,YAAY;MAClBvG,QAAQ,EAAEA,QAAQ;MAClB0G,QAAQ,EAAEA,QAAQ;MAClBjC,IAAI,EAAEjF,IAAI,CAACvC,GAAG,CAACwH,IAAI,EAAE,GAAG,CAAC;MAAE;MAC3BjB,WAAW,EAAE,GAAGxD,QAAQ,UAAUuG,YAAY;IAChD,CAAC;EACH;EAEAnB,sBAAsBA,CAAC/C,IAAI,EAAE;IAC3B,IAAI2B,KAAK,GAAG,CAAC;IACb,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACjE,MAAM,GAAG,CAAC,EAAEuE,CAAC,EAAE,EAAE;MACxCqB,KAAK,IAAI,IAAI,CAAC/D,WAAW,CAACoC,IAAI,CAACM,CAAC,CAAC,CAACrD,EAAE,EAAE+C,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACrD,EAAE,CAAC;IACvD;IACA,OAAO0E,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}