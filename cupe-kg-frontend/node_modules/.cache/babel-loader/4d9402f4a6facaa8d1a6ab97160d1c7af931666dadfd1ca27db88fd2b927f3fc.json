{"ast":null,"code":"/**\r\n * API service for the CuPe-KG tourism application\r\n * Handles all data fetching from the backend\r\n */\n\n// Base API URL - replace with your actual backend URL in production\n// src/services/api.js\n\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\r\n * Check if the API is healthy and responsive\r\n * @returns {Promise<boolean>} - Promise that resolves to true if API is healthy\r\n */\nexport const checkAPIHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/health`);\n    if (!response.ok) {\n      throw new Error(`API health check failed: ${response.status}`);\n    }\n    return true;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch information about a specific place\r\n * @param {string} placeId - ID of the place to fetch\r\n * @returns {Promise} - Promise containing place data\r\n */\nexport const fetchPlaceData = async placeId => {\n  try {\n    const response = await fetch(`${API_BASE}/place-info?name=${encodeURIComponent(placeId)}`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching place data:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch all available cultural routes\r\n * @returns {Promise} - Promise containing routes data\r\n */\nexport const fetchRoutes = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/routes`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching routes:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch all tourist locations\r\n * @returns {Promise} - Promise containing locations data\r\n */\nexport const fetchLocations = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/locations`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching locations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Search for locations by keywords\r\n * @param {string} query - Search query\r\n * @returns {Promise} - Promise containing search results\r\n */\nexport const searchLocations = async query => {\n  try {\n    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error searching locations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch cultural perspective data for visualization\r\n * @param {string} placeId - ID of the place\r\n * @param {string} perspectiveType - Type of perspective (e.g., 'religious', 'historical')\r\n * @returns {Promise} - Promise containing perspective data\r\n */\nexport const fetchCulturalPerspective = async (placeId, perspectiveType) => {\n  try {\n    const response = await fetch(`${API_BASE}/perspective?place=${encodeURIComponent(placeId)}&type=${encodeURIComponent(perspectiveType)}`);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching cultural perspective:', error);\n    throw error;\n  }\n};\n\n// Export API base URL for use in other parts of the application\nexport { API_BASE };","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","checkAPIHealth","response","fetch","ok","Error","status","error","console","fetchPlaceData","placeId","encodeURIComponent","json","fetchRoutes","fetchLocations","searchLocations","query","fetchCulturalPerspective","perspectiveType"],"sources":["D:/MY projects/CupeKG/cupe-kg-frontend/src/services/api.js"],"sourcesContent":["/**\r\n * API service for the CuPe-KG tourism application\r\n * Handles all data fetching from the backend\r\n */\r\n\r\n// Base API URL - replace with your actual backend URL in production\r\n// src/services/api.js\r\n\r\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n/**\r\n * Check if the API is healthy and responsive\r\n * @returns {Promise<boolean>} - Promise that resolves to true if API is healthy\r\n */\r\nexport const checkAPIHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/health`);\r\n    if (!response.ok) {\r\n      throw new Error(`API health check failed: ${response.status}`);\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('API health check failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch information about a specific place\r\n * @param {string} placeId - ID of the place to fetch\r\n * @returns {Promise} - Promise containing place data\r\n */\r\nexport const fetchPlaceData = async (placeId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/place-info?name=${encodeURIComponent(placeId)}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching place data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all available cultural routes\r\n * @returns {Promise} - Promise containing routes data\r\n */\r\nexport const fetchRoutes = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/routes`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching routes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all tourist locations\r\n * @returns {Promise} - Promise containing locations data\r\n */\r\nexport const fetchLocations = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/locations`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching locations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Search for locations by keywords\r\n * @param {string} query - Search query\r\n * @returns {Promise} - Promise containing search results\r\n */\r\nexport const searchLocations = async (query) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/search?q=${encodeURIComponent(query)}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error searching locations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch cultural perspective data for visualization\r\n * @param {string} placeId - ID of the place\r\n * @param {string} perspectiveType - Type of perspective (e.g., 'religious', 'historical')\r\n * @returns {Promise} - Promise containing perspective data\r\n */\r\nexport const fetchCulturalPerspective = async (placeId, perspectiveType) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE}/perspective?place=${encodeURIComponent(placeId)}&type=${encodeURIComponent(perspectiveType)}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching cultural perspective:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export API base URL for use in other parts of the application\r\nexport { API_BASE };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}